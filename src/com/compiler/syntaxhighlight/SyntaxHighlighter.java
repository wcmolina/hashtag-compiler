/* The following code was generated by JFlex 1.6.0 */

package com.compiler.syntaxhighlight;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>res/lexers/syntax.flex</tt>
 */
public class SyntaxHighlighter {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\6\1\5\1\12\1\13\1\4\22\0\1\6\1\22\1\11" +
                    "\1\14\1\0\1\0\1\0\1\10\1\0\1\0\1\17\1\17\1\23" +
                    "\1\17\1\7\1\17\12\1\1\23\1\23\1\20\1\21\1\20\2\0" +
                    "\32\2\4\0\1\3\1\0\1\37\1\32\1\35\1\27\1\34\1\43" +
                    "\1\42\1\36\1\24\1\2\1\45\1\33\1\47\1\25\1\30\1\50" +
                    "\1\2\1\40\1\41\1\26\1\31\1\46\1\44\3\2\1\15\1\0" +
                    "\1\16\7\0\1\12\u1fa2\0\1\12\1\12\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\5\1\1\3\1\1\2\4\1\1" +
                    "\1\5\20\1\3\0\1\6\1\0\1\7\1\0\1\3" +
                    "\1\1\1\10\1\1\1\10\21\1\1\2\40\1\1\11" +
                    "\12\1\1\12\2\1";

    private static int[] zzUnpackAction() {
        int[] result = new int[106];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f" +
                    "\0\u0148\0\u0171\0\51\0\u019a\0\u019a\0\51\0\u01c3\0\u01ec" +
                    "\0\u0215\0\u023e\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334" +
                    "\0\u035d\0\u0386\0\u03af\0\u03d8\0\u0401\0\u042a\0\u0453\0\u047c" +
                    "\0\u04a5\0\51\0\u011f\0\u011f\0\u0171\0\51\0\u04ce\0\173" +
                    "\0\u04f7\0\u0520\0\u0549\0\u0572\0\u059b\0\u05c4\0\u05ed\0\u0616" +
                    "\0\u063f\0\u0668\0\u0691\0\u06ba\0\u06e3\0\u070c\0\u0735\0\u075e" +
                    "\0\u0787\0\u07b0\0\u07d9\0\u0453\0\u0802\0\u082b\0\u0854\0\u087d" +
                    "\0\u08a6\0\u08cf\0\u08f8\0\u0921\0\u094a\0\u0973\0\u099c\0\u09c5" +
                    "\0\u09ee\0\u0a17\0\u0a40\0\u0a69\0\u0a92\0\u0abb\0\u0ae4\0\u0b0d" +
                    "\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1\0\u0bda\0\u0c03\0\u0c2c\0\u0c55" +
                    "\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9\0\173\0\u0d22\0\u0d4b\0\u0d74" +
                    "\0\u0d9d\0\u0dc6\0\u0def\0\u0e18\0\u0e41\0\u0e6a\0\u0e93\0\173" +
                    "\0\u0ebc\0\u0ee5";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[106];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\1\3\1\4\1\2\1\5\1\2\1\6\1\2" +
                    "\1\7\1\10\1\0\1\6\1\11\1\12\1\2\1\13" +
                    "\2\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23" +
                    "\1\4\1\24\1\4\1\25\1\26\1\4\1\27\1\30" +
                    "\1\31\1\4\1\32\1\33\1\4\1\34\1\35\1\36" +
                    "\52\0\1\3\5\0\1\37\42\0\3\4\20\0\25\4" +
                    "\5\0\1\2\51\0\1\6\4\0\1\6\36\0\1\40" +
                    "\1\41\5\0\1\42\13\0\25\41\4\43\2\0\3\43" +
                    "\1\44\2\0\35\43\4\11\2\0\4\11\2\0\35\11" +
                    "\16\45\1\46\32\45\21\0\1\13\30\0\3\4\20\0" +
                    "\1\4\1\47\15\4\1\50\5\4\1\0\3\4\20\0" +
                    "\4\4\1\47\20\4\1\0\3\4\20\0\14\4\1\51" +
                    "\10\4\1\0\3\4\20\0\4\4\1\52\20\4\1\0" +
                    "\3\4\20\0\2\4\1\53\11\4\1\50\10\4\1\0" +
                    "\3\4\20\0\4\4\1\54\3\4\1\55\3\4\1\56" +
                    "\10\4\1\0\3\4\20\0\1\4\1\57\5\4\1\60" +
                    "\15\4\1\0\3\4\20\0\12\4\1\61\1\60\11\4" +
                    "\1\0\3\4\20\0\1\4\1\57\23\4\1\0\3\4" +
                    "\20\0\10\4\1\62\14\4\1\0\3\4\20\0\2\4" +
                    "\1\63\15\4\1\64\4\4\1\0\3\4\20\0\4\4" +
                    "\1\65\1\66\5\4\1\67\11\4\1\0\3\4\20\0" +
                    "\12\4\1\70\12\4\1\0\3\4\20\0\4\4\1\71" +
                    "\20\4\1\0\3\4\20\0\13\4\1\72\11\4\1\0" +
                    "\3\4\20\0\14\4\1\73\10\4\1\0\1\74\50\0" +
                    "\1\40\6\0\1\42\50\0\1\42\41\0\3\4\20\0" +
                    "\2\4\1\50\22\4\1\0\3\4\20\0\5\4\1\75" +
                    "\17\4\1\0\3\4\20\0\5\4\1\76\17\4\1\0" +
                    "\3\4\20\0\12\4\1\77\12\4\1\0\3\4\20\0" +
                    "\4\4\1\100\20\4\1\0\3\4\20\0\16\4\1\101" +
                    "\6\4\1\0\3\4\20\0\10\4\1\102\14\4\1\0" +
                    "\3\4\20\0\3\4\1\50\21\4\1\0\3\4\20\0" +
                    "\15\4\1\75\7\4\1\0\3\4\20\0\13\4\1\65" +
                    "\11\4\1\0\3\4\20\0\2\4\1\103\10\4\1\104" +
                    "\11\4\1\0\3\4\20\0\14\4\1\105\10\4\1\0" +
                    "\3\4\20\0\1\106\24\4\1\0\3\4\20\0\14\4" +
                    "\1\50\10\4\1\0\3\4\20\0\1\4\1\107\23\4" +
                    "\1\0\3\4\20\0\7\4\1\60\15\4\1\0\3\4" +
                    "\20\0\1\110\24\4\1\0\3\4\20\0\1\57\24\4" +
                    "\1\0\3\4\20\0\1\111\24\4\1\0\3\4\20\0" +
                    "\1\112\24\4\1\0\3\4\20\0\10\4\1\50\14\4" +
                    "\1\0\3\4\20\0\6\4\1\110\16\4\1\0\3\4" +
                    "\20\0\10\4\1\65\14\4\1\0\3\4\20\0\7\4" +
                    "\1\113\15\4\1\0\3\4\20\0\1\114\24\4\1\0" +
                    "\3\4\20\0\13\4\1\115\11\4\1\0\3\4\20\0" +
                    "\5\4\1\116\17\4\1\0\3\4\20\0\3\4\1\117" +
                    "\21\4\1\0\3\4\20\0\1\120\24\4\1\0\3\4" +
                    "\20\0\2\4\1\121\22\4\1\0\3\4\20\0\11\4" +
                    "\1\122\13\4\1\0\3\4\20\0\7\4\1\75\15\4" +
                    "\1\0\3\4\20\0\1\4\1\123\23\4\1\0\3\4" +
                    "\20\0\1\4\1\124\23\4\1\0\3\4\20\0\10\4" +
                    "\1\125\14\4\1\0\3\4\20\0\1\4\1\50\23\4" +
                    "\1\0\3\4\20\0\21\4\1\50\3\4\1\0\3\4" +
                    "\20\0\14\4\1\114\10\4\1\0\3\4\20\0\1\112" +
                    "\2\4\1\126\5\4\1\127\3\4\1\130\7\4\1\0" +
                    "\3\4\20\0\1\4\1\131\23\4\1\0\3\4\20\0" +
                    "\11\4\1\132\13\4\1\0\3\4\20\0\2\4\1\133" +
                    "\22\4\1\0\3\4\20\0\6\4\1\134\16\4\1\0" +
                    "\3\4\20\0\2\4\1\135\22\4\1\0\3\4\20\0" +
                    "\13\4\1\114\11\4\1\0\3\4\20\0\4\4\1\136" +
                    "\20\4\1\0\3\4\20\0\12\4\1\137\12\4\1\0" +
                    "\3\4\20\0\2\4\1\140\22\4\1\0\3\4\20\0" +
                    "\16\4\1\50\6\4\1\0\3\4\20\0\12\4\1\50" +
                    "\12\4\1\0\3\4\20\0\1\141\24\4\1\0\3\4" +
                    "\20\0\10\4\1\55\14\4\1\0\3\4\20\0\5\4" +
                    "\1\142\17\4\1\0\3\4\20\0\13\4\1\143\11\4" +
                    "\1\0\3\4\20\0\14\4\1\144\10\4\1\0\3\4" +
                    "\20\0\4\4\1\145\20\4\1\0\3\4\20\0\6\4" +
                    "\1\146\16\4\1\0\3\4\20\0\14\4\1\135\10\4" +
                    "\1\0\3\4\20\0\1\147\24\4\1\0\3\4\20\0" +
                    "\1\4\1\150\23\4\1\0\3\4\20\0\7\4\1\151" +
                    "\15\4\1\0\3\4\20\0\1\4\1\152\23\4\1\0" +
                    "\3\4\20\0\10\4\1\135\14\4\1\0\3\4\20\0" +
                    "\16\4\1\135\6\4";

    private static int[] zzUnpackTrans() {
        int[] result = new int[3854];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\11\10\1\1\11\2\1\1\11\20\1\3\0" +
                    "\1\11\1\0\1\1\1\0\1\11\104\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[106];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead.
     * When a lead/high surrogate has been read from the input stream
     * into the final zzBuffer position, this will have a value of 1;
     * otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /* user code: */
    public Token token(int type) {
        return new Token(type, yychar, yylength(), yytext());
    }


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public SyntaxHighlighter(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 166) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }


    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

      /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

    /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

    /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int totalRead = 0;
        while (totalRead < requested) {
            int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
            if (numRead == -1) {
                break;
            }
            totalRead += numRead;
        }

        if (totalRead > 0) {
            zzEndRead += totalRead;
            if (totalRead == requested) { /* possibly more input available */
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            return false;
        }

        // totalRead = 0: End of stream
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     * <p>
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     * <p>
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE)
            zzBuffer = new char[ZZ_BUFFERSIZE];
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public Token yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            yychar += zzMarkedPosL - zzStartRead;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead;
                 zzCurrentPosL < zzMarkedPosL;
                 zzCurrentPosL += zzCharCount) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 1: {
                    return token(TokenConstants.PLAIN);
                }
                case 11:
                    break;
                case 2: {
                    return token(TokenConstants.NUMBER);
                }
                case 12:
                    break;
                case 3: {
                    return token(TokenConstants.COMMENT);
                }
                case 13:
                    break;
                case 4: {
                    return token(TokenConstants.OPERATOR);
                }
                case 14:
                    break;
                case 5: {
                    return token(TokenConstants.SEMI);
                }
                case 15:
                    break;
                case 6: {
                    return token(TokenConstants.CARACTER);
                }
                case 16:
                    break;
                case 7: {
                    return token(TokenConstants.CADENA);
                }
                case 17:
                    break;
                case 8: {
                    return token(TokenConstants.KEYWORD);
                }
                case 18:
                    break;
                case 9: {
                    return token(TokenConstants.READ);
                }
                case 19:
                    break;
                case 10: {
                    return token(TokenConstants.FUNCTION);
                }
                case 20:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        {
                            return null;
                        }
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }


}
