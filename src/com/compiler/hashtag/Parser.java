
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140611 (SVN rev 31)
// Thu Jun 04 00:01:41 CST 2015
//----------------------------------------------------

package com.compiler.hashtag;

import com.compiler.ast.Data;
import com.compiler.ast.Node;
import com.compiler.ast.FunctionType;
import java_cup.runtime.Symbol;

/** CUP v0.11b 20140611 (SVN rev 31) generated parser.
  * @version Thu Jun 04 00:01:41 CST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\214\000\002\002\004\000\002\010\006\000\002\010" +
    "\005\000\002\067\002\000\002\010\006\000\002\053\003" +
    "\000\002\002\004\000\002\070\002\000\002\002\005\000" +
    "\002\013\005\000\002\013\004\000\002\071\002\000\002" +
    "\013\006\000\002\003\004\000\002\003\003\000\002\004" +
    "\003\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\072\002\000" +
    "\002\004\005\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\073\002\000\002\014\005\000\002\054" +
    "\005\000\002\054\005\000\002\054\005\000\002\054\005" +
    "\000\002\036\003\000\002\037\006\000\002\037\005\000" +
    "\002\074\002\000\002\037\006\000\002\075\002\000\002" +
    "\037\006\000\002\057\003\000\002\061\005\000\002\061" +
    "\004\000\002\062\003\000\002\060\005\000\002\060\005" +
    "\000\002\007\003\000\002\006\005\000\002\006\005\000" +
    "\002\006\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\015" +
    "\003\000\002\015\003\000\002\047\006\000\002\047\005" +
    "\000\002\044\005\000\002\044\003\000\002\046\006\000" +
    "\002\045\003\000\002\045\003\000\002\045\002\000\002" +
    "\011\004\000\002\011\003\000\002\012\011\000\002\012" +
    "\011\000\002\076\002\000\002\012\006\000\002\050\005" +
    "\000\002\050\003\000\002\050\002\000\002\051\004\000" +
    "\002\052\004\000\002\052\004\000\002\026\003\000\002" +
    "\026\003\000\002\027\003\000\002\027\003\000\002\030" +
    "\003\000\002\030\003\000\002\031\007\000\002\077\002" +
    "\000\002\031\006\000\002\035\007\000\002\032\007\000" +
    "\002\100\002\000\002\032\010\000\002\101\002\000\002" +
    "\032\006\000\002\033\007\000\002\033\011\000\002\102" +
    "\002\000\002\033\006\000\002\034\007\000\002\103\002" +
    "\000\002\034\006\000\002\040\003\000\002\024\005\000" +
    "\002\024\003\000\002\025\003\000\002\016\005\000\002" +
    "\016\004\000\002\016\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\017\003\000\002\017\003\000" +
    "\002\041\005\000\002\041\003\000\002\042\005\000\002" +
    "\042\003\000\002\043\005\000\002\043\003\000\002\055" +
    "\003\000\002\055\003\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\063\003\000\002\065\003\000\002" +
    "\065\003\000\002\065\004\000\002\065\004\000\002\064" +
    "\003\000\002\064\003\000\002\066\003\000\002\066\003" +
    "\000\002\021\004\000\002\021\004\000\002\022\004\000" +
    "\002\023\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\006\003\005\035\006\001\002\000\004\002" +
    "\360\001\002\000\006\003\ufffe\025\ufffe\001\002\000\010" +
    "\003\011\025\010\042\015\001\002\000\006\003\ufffc\025" +
    "\ufffc\001\002\000\006\003\037\041\036\001\002\000\006" +
    "\003\ufffa\041\ufffa\001\002\000\010\003\uffc0\025\uffc0\042" +
    "\015\001\002\000\006\003\011\025\010\001\002\000\004" +
    "\036\346\001\002\000\020\003\021\046\025\047\016\050" +
    "\023\051\017\052\024\060\022\001\002\000\004\065\uffcf" +
    "\001\002\000\004\065\uffcc\001\002\000\004\065\026\001" +
    "\002\000\006\003\uffbd\041\uffbd\001\002\000\004\065\026" +
    "\001\002\000\004\065\uffce\001\002\000\004\065\uffcd\001" +
    "\002\000\004\065\uffd0\001\002\000\050\004\uffd7\005\uffd7" +
    "\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7" +
    "\024\uffd7\026\uffd7\027\uffd7\030\uffd7\001\002\000\004\021" +
    "\030\001\002\000\020\020\uffb9\023\uffb9\046\025\047\016" +
    "\050\023\051\017\052\024\001\002\000\004\065\026\001" +
    "\002\000\006\020\uffba\023\uffba\001\002\000\006\020\035" +
    "\023\034\001\002\000\014\046\025\047\016\050\023\051" +
    "\017\052\024\001\002\000\006\003\037\041\036\001\002" +
    "\000\044\003\063\031\052\032\057\034\074\036\333\037" +
    "\071\040\050\043\065\044\062\045\101\046\025\047\016" +
    "\050\023\051\017\052\024\057\045\065\026\001\002\000" +
    "\042\003\ufff6\031\ufff6\032\ufff6\034\ufff6\037\ufff6\040\ufff6" +
    "\043\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051" +
    "\ufff6\052\ufff6\057\ufff6\065\ufff6\001\002\000\010\003\uffbf" +
    "\025\uffbf\042\uffbf\001\002\000\042\003\063\031\052\032" +
    "\057\034\074\037\071\040\050\043\065\044\062\045\101" +
    "\046\025\047\016\050\023\051\017\052\024\057\045\065" +
    "\026\001\002\000\004\024\uffe8\001\002\000\044\003\uffb3" +
    "\031\uffb3\032\uffb3\034\uffb3\036\uffb3\037\uffb3\040\uffb3\043" +
    "\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3" +
    "\052\uffb3\057\uffb3\065\uffb3\001\002\000\044\003\063\031" +
    "\052\032\057\034\074\036\ufff3\037\071\040\050\043\065" +
    "\044\062\045\101\046\025\047\016\050\023\051\017\052" +
    "\024\057\045\065\026\001\002\000\006\003\324\026\325" +
    "\001\002\000\006\017\301\024\uffea\001\002\000\044\003" +
    "\uffb5\031\uffb5\032\uffb5\034\uffb5\036\uffb5\037\uffb5\040\uffb5" +
    "\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051" +
    "\uffb5\052\uffb5\057\uffb5\065\uffb5\001\002\000\030\003\316" +
    "\005\107\014\112\021\114\061\124\062\131\063\120\064" +
    "\110\065\026\066\123\067\117\001\002\000\004\036\315" +
    "\001\002\000\006\003\274\021\275\001\002\000\004\024" +
    "\273\001\002\000\004\024\272\001\002\000\004\024\271" +
    "\001\002\000\044\003\uffb2\031\uffb2\032\uffb2\034\uffb2\036" +
    "\uffb2\037\uffb2\040\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2" +
    "\047\uffb2\050\uffb2\051\uffb2\052\uffb2\057\uffb2\065\uffb2\001" +
    "\002\000\006\003\260\021\261\001\002\000\044\003\uffb4" +
    "\031\uffb4\032\uffb4\034\uffb4\036\uffb4\037\uffb4\040\uffb4\043" +
    "\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4" +
    "\052\uffb4\057\uffb4\065\uffb4\001\002\000\004\024\257\001" +
    "\002\000\026\005\107\014\112\021\114\061\124\062\131" +
    "\063\120\064\110\065\026\066\123\067\117\001\002\000" +
    "\044\003\uffec\024\uffe7\031\uffec\032\uffec\034\uffec\037\uffec" +
    "\040\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050" +
    "\uffec\051\uffec\052\uffec\057\uffec\065\uffec\001\002\000\004" +
    "\024\uffca\001\002\000\004\024\uffe1\001\002\000\044\003" +
    "\uffb1\031\uffb1\032\uffb1\034\uffb1\036\uffb1\037\uffb1\040\uffb1" +
    "\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051" +
    "\uffb1\052\uffb1\057\uffb1\065\uffb1\001\002\000\004\024\uffcb" +
    "\001\002\000\012\004\226\005\230\017\224\021\142\001" +
    "\002\000\006\003\215\021\216\001\002\000\010\017\uffda" +
    "\023\213\024\uffda\001\002\000\044\003\uffed\031\uffed\032" +
    "\uffed\034\uffed\036\uffed\037\uffed\040\uffed\043\uffed\044\uffed" +
    "\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed\057" +
    "\uffed\065\uffed\001\002\000\006\003\200\021\201\001\002" +
    "\000\004\024\uffe9\001\002\000\004\024\uffd1\001\002\000" +
    "\004\065\026\001\002\000\044\003\uffb0\031\uffb0\032\uffb0" +
    "\034\uffb0\036\uffb0\037\uffb0\040\uffb0\043\uffb0\044\uffb0\045" +
    "\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\057\uffb0" +
    "\065\uffb0\001\002\000\004\021\103\001\002\000\044\003" +
    "\ufff2\031\ufff2\032\ufff2\034\ufff2\036\ufff2\037\ufff2\040\ufff2" +
    "\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\051" +
    "\ufff2\052\ufff2\057\ufff2\065\ufff2\001\002\000\030\005\107" +
    "\014\112\020\uffc2\021\114\061\124\062\131\063\120\064" +
    "\110\065\026\066\123\067\117\001\002\000\044\004\uff83" +
    "\005\uff83\006\uff83\007\uff83\010\uff83\011\uff83\012\uff83\013" +
    "\uff83\015\uff83\016\uff83\020\uff83\022\uff83\023\uff83\024\uff83" +
    "\026\uff83\027\uff83\030\uff83\001\002\000\016\020\uff9c\023" +
    "\uff9c\024\uff9c\026\uff9c\027\uff9c\030\uff9c\001\002\000\044" +
    "\004\uff8f\005\uff8f\006\167\007\166\010\uff8f\011\uff8f\012" +
    "\uff8f\013\uff8f\015\uff8f\016\uff8f\020\uff8f\022\165\023\uff8f" +
    "\024\uff8f\026\uff8f\027\uff8f\030\uff8f\001\002\000\006\061" +
    "\175\062\176\001\002\000\044\004\uff7d\005\uff7d\006\uff7d" +
    "\007\uff7d\010\uff7d\011\uff7d\012\uff7d\013\uff7d\015\uff7d\016" +
    "\uff7d\020\uff7d\022\uff7d\023\uff7d\024\uff7d\026\uff7d\027\uff7d" +
    "\030\uff7d\001\002\000\044\004\uff8b\005\uff8b\006\uff8b\007" +
    "\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b\015\uff8b\016\uff8b" +
    "\020\uff8b\022\uff8b\023\uff8b\024\uff8b\026\uff8b\027\uff8b\030" +
    "\uff8b\001\002\000\026\005\107\014\112\021\114\061\124" +
    "\062\131\063\120\064\110\065\026\066\123\067\117\001" +
    "\002\000\044\004\uff85\005\uff85\006\uff85\007\uff85\010\uff85" +
    "\011\uff85\012\uff85\013\uff85\015\uff85\016\uff85\020\uff85\022" +
    "\uff85\023\uff85\024\uff85\026\uff85\027\uff85\030\uff85\001\002" +
    "\000\026\005\107\014\112\021\114\061\124\062\131\063" +
    "\120\064\110\065\026\066\123\067\117\001\002\000\004" +
    "\020\uffc3\001\002\000\036\004\154\005\152\010\156\011" +
    "\153\012\155\013\151\015\160\016\157\020\uff99\023\uff99" +
    "\024\uff99\026\uff99\027\uff99\030\uff99\001\002\000\044\004" +
    "\uff7b\005\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b\012\uff7b" +
    "\013\uff7b\015\uff7b\016\uff7b\020\uff7b\022\uff7b\023\uff7b\024" +
    "\uff7b\026\uff7b\027\uff7b\030\uff7b\001\002\000\044\004\uff7c" +
    "\005\uff7c\006\uff7c\007\uff7c\010\uff7c\011\uff7c\012\uff7c\013" +
    "\uff7c\015\uff7c\016\uff7c\020\uff7c\022\uff7c\023\uff7c\024\uff7c" +
    "\026\uff7c\027\uff7c\030\uff7c\001\002\000\042\004\uff82\005" +
    "\uff82\006\uff82\007\uff82\010\uff82\011\uff82\012\uff82\013\uff82" +
    "\015\uff82\016\uff82\020\uff82\021\142\022\uff82\024\uff82\027" +
    "\uff82\030\uff82\001\002\000\016\020\uff9d\023\uff9d\024\uff9d" +
    "\026\uff9d\027\uff9d\030\uff9d\001\002\000\044\004\uff7a\005" +
    "\uff7a\006\uff7a\007\uff7a\010\uff7a\011\uff7a\012\uff7a\013\uff7a" +
    "\015\uff7a\016\uff7a\020\uff7a\022\uff7a\023\uff7a\024\uff7a\026" +
    "\uff7a\027\uff7a\030\uff7a\001\002\000\044\004\uff81\005\uff81" +
    "\006\uff81\007\uff81\010\uff81\011\uff81\012\uff81\013\uff81\015" +
    "\uff81\016\uff81\020\uff81\022\uff81\023\uff81\024\uff81\026\uff81" +
    "\027\uff81\030\uff81\001\002\000\044\004\uff84\005\uff84\006" +
    "\uff84\007\uff84\010\uff84\011\uff84\012\uff84\013\uff84\015\uff84" +
    "\016\uff84\020\uff84\022\uff84\023\uff84\024\uff84\026\uff84\027" +
    "\uff84\030\uff84\001\002\000\004\020\141\001\002\000\016" +
    "\020\uff9f\023\uff9f\024\uff9f\026\uff9f\027\134\030\136\001" +
    "\002\000\044\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d" +
    "\011\uff8d\012\uff8d\013\uff8d\015\uff8d\016\uff8d\020\uff8d\022" +
    "\uff8d\023\uff8d\024\uff8d\026\uff8d\027\uff8d\030\uff8d\001\002" +
    "\000\044\004\uff80\005\uff80\006\uff80\007\uff80\010\uff80\011" +
    "\uff80\012\uff80\013\uff80\015\uff80\016\uff80\020\uff80\022\uff80" +
    "\023\uff80\024\uff80\026\uff80\027\uff80\030\uff80\001\002\000" +
    "\004\020\uffc4\001\002\000\012\020\uffd4\023\uffd4\024\uffd4" +
    "\026\uffd4\001\002\000\026\005\uff92\014\uff92\021\uff92\061" +
    "\uff92\062\uff92\063\uff92\064\uff92\065\uff92\066\uff92\067\uff92" +
    "\001\002\000\026\005\107\014\112\021\114\061\124\062" +
    "\131\063\120\064\110\065\026\066\123\067\117\001\002" +
    "\000\026\005\uff91\014\uff91\021\uff91\061\uff91\062\uff91\063" +
    "\uff91\064\uff91\065\uff91\066\uff91\067\uff91\001\002\000\044" +
    "\004\uff82\005\uff82\006\uff82\007\uff82\010\uff82\011\uff82\012" +
    "\uff82\013\uff82\015\uff82\016\uff82\020\uff82\022\uff82\023\uff82" +
    "\024\uff82\026\uff82\027\uff82\030\uff82\001\002\000\016\020" +
    "\uff9e\023\uff9e\024\uff9e\026\uff9e\027\uff9e\030\uff9e\001\002" +
    "\000\004\024\uffc5\001\002\000\030\005\107\014\112\020" +
    "\143\021\114\061\124\062\131\063\120\064\110\065\026" +
    "\066\123\067\117\001\002\000\006\020\uffc8\024\uffc8\001" +
    "\002\000\004\020\150\001\002\000\006\020\uffc6\023\146" +
    "\001\002\000\026\005\107\014\112\021\114\061\124\062" +
    "\131\063\120\064\110\065\026\066\123\067\117\001\002" +
    "\000\004\020\uffc7\001\002\000\006\020\uffc9\024\uffc9\001" +
    "\002\000\024\005\uff95\021\uff95\061\uff95\062\uff95\063\uff95" +
    "\064\uff95\065\uff95\066\uff95\067\uff95\001\002\000\024\005" +
    "\uff89\021\uff89\061\uff89\062\uff89\063\uff89\064\uff89\065\uff89" +
    "\066\uff89\067\uff89\001\002\000\024\005\uff97\021\uff97\061" +
    "\uff97\062\uff97\063\uff97\064\uff97\065\uff97\066\uff97\067\uff97" +
    "\001\002\000\024\005\uff8a\021\uff8a\061\uff8a\062\uff8a\063" +
    "\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a\001\002\000\024" +
    "\005\uff96\021\uff96\061\uff96\062\uff96\063\uff96\064\uff96\065" +
    "\uff96\066\uff96\067\uff96\001\002\000\024\005\uff98\021\uff98" +
    "\061\uff98\062\uff98\063\uff98\064\uff98\065\uff98\066\uff98\067" +
    "\uff98\001\002\000\024\005\uff94\021\uff94\061\uff94\062\uff94" +
    "\063\uff94\064\uff94\065\uff94\066\uff94\067\uff94\001\002\000" +
    "\024\005\uff93\021\uff93\061\uff93\062\uff93\063\uff93\064\uff93" +
    "\065\uff93\066\uff93\067\uff93\001\002\000\024\005\107\021" +
    "\114\061\124\062\131\063\120\064\110\065\026\066\123" +
    "\067\117\001\002\000\024\005\107\021\114\061\124\062" +
    "\131\063\120\064\110\065\026\066\123\067\117\001\002" +
    "\000\022\004\154\005\152\020\uff9b\023\uff9b\024\uff9b\026" +
    "\uff9b\027\uff9b\030\uff9b\001\002\000\044\004\uff90\005\uff90" +
    "\006\167\007\166\010\uff90\011\uff90\012\uff90\013\uff90\015" +
    "\uff90\016\uff90\020\uff90\022\165\023\uff90\024\uff90\026\uff90" +
    "\027\uff90\030\uff90\001\002\000\024\005\uff86\021\uff86\061" +
    "\uff86\062\uff86\063\uff86\064\uff86\065\uff86\066\uff86\067\uff86" +
    "\001\002\000\024\005\uff88\021\uff88\061\uff88\062\uff88\063" +
    "\uff88\064\uff88\065\uff88\066\uff88\067\uff88\001\002\000\024" +
    "\005\uff87\021\uff87\061\uff87\062\uff87\063\uff87\064\uff87\065" +
    "\uff87\066\uff87\067\uff87\001\002\000\024\005\107\021\114" +
    "\061\124\062\131\063\120\064\110\065\026\066\123\067" +
    "\117\001\002\000\044\004\uff8e\005\uff8e\006\uff8e\007\uff8e" +
    "\010\uff8e\011\uff8e\012\uff8e\013\uff8e\015\uff8e\016\uff8e\020" +
    "\uff8e\022\uff8e\023\uff8e\024\uff8e\026\uff8e\027\uff8e\030\uff8e" +
    "\001\002\000\004\020\173\001\002\000\044\004\uff8c\005" +
    "\uff8c\006\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c" +
    "\015\uff8c\016\uff8c\020\uff8c\022\uff8c\023\uff8c\024\uff8c\026" +
    "\uff8c\027\uff8c\030\uff8c\001\002\000\016\020\uff9a\023\uff9a" +
    "\024\uff9a\026\uff9a\027\uff9a\030\uff9a\001\002\000\044\004" +
    "\uff7f\005\uff7f\006\uff7f\007\uff7f\010\uff7f\011\uff7f\012\uff7f" +
    "\013\uff7f\015\uff7f\016\uff7f\020\uff7f\022\uff7f\023\uff7f\024" +
    "\uff7f\026\uff7f\027\uff7f\030\uff7f\001\002\000\044\004\uff7e" +
    "\005\uff7e\006\uff7e\007\uff7e\010\uff7e\011\uff7e\012\uff7e\013" +
    "\uff7e\015\uff7e\016\uff7e\020\uff7e\022\uff7e\023\uff7e\024\uff7e" +
    "\026\uff7e\027\uff7e\030\uff7e\001\002\000\010\017\uffd8\023" +
    "\uffd8\024\uffd8\001\002\000\006\003\uffa8\041\uffa8\001\002" +
    "\000\030\005\107\014\112\020\202\021\114\061\124\062" +
    "\131\063\120\064\110\065\026\066\123\067\117\001\002" +
    "\000\004\003\206\001\002\000\004\020\204\001\002\000" +
    "\006\003\037\041\036\001\002\000\044\003\uffab\031\uffab" +
    "\032\uffab\034\uffab\036\uffab\037\uffab\040\uffab\043\uffab\044" +
    "\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab" +
    "\057\uffab\065\uffab\001\002\000\006\003\uffaa\041\uffaa\001" +
    "\002\000\006\003\037\041\036\001\002\000\044\003\uffa9" +
    "\031\uffa9\032\uffa9\034\uffa9\036\uffa9\037\uffa9\040\uffa9\043" +
    "\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9" +
    "\052\uffa9\057\uffa9\065\uffa9\001\002\000\006\003\037\041" +
    "\036\001\002\000\044\003\uffa7\031\uffa7\032\uffa7\034\uffa7" +
    "\036\uffa7\037\uffa7\040\uffa7\043\uffa7\044\uffa7\045\uffa7\046" +
    "\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\057\uffa7\065\uffa7" +
    "\001\002\000\004\065\026\001\002\000\010\017\uffd9\023" +
    "\uffd9\024\uffd9\001\002\000\006\003\uffa1\041\uffa1\001\002" +
    "\000\026\005\107\014\112\021\114\061\124\062\131\063" +
    "\120\064\110\065\026\066\123\067\117\001\002\000\004" +
    "\020\220\001\002\000\006\003\037\041\036\001\002\000" +
    "\044\003\uffa2\031\uffa2\032\uffa2\034\uffa2\036\uffa2\037\uffa2" +
    "\040\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050" +
    "\uffa2\051\uffa2\052\uffa2\057\uffa2\065\uffa2\001\002\000\006" +
    "\003\037\041\036\001\002\000\044\003\uffa0\031\uffa0\032" +
    "\uffa0\034\uffa0\036\uffa0\037\uffa0\040\uffa0\043\uffa0\044\uffa0" +
    "\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\057" +
    "\uffa0\065\uffa0\001\002\000\036\005\107\014\112\021\114" +
    "\053\236\054\233\055\237\056\234\061\124\062\131\063" +
    "\120\064\110\065\026\066\123\067\117\001\002\000\006" +
    "\020\uff79\024\uff79\001\002\000\004\004\232\001\002\000" +
    "\006\020\uff78\024\uff78\001\002\000\004\005\231\001\002" +
    "\000\006\020\uff76\024\uff76\001\002\000\006\020\uff77\024" +
    "\uff77\001\002\000\004\021\247\001\002\000\004\021\245" +
    "\001\002\000\004\024\uffd2\001\002\000\004\021\243\001" +
    "\002\000\004\021\241\001\002\000\004\024\uffd3\001\002" +
    "\000\004\020\242\001\002\000\004\024\uffe5\001\002\000" +
    "\004\020\244\001\002\000\004\024\uffe3\001\002\000\004" +
    "\020\246\001\002\000\004\024\uffe4\001\002\000\004\020" +
    "\250\001\002\000\004\024\uffe2\001\002\000\042\003\063" +
    "\031\052\032\057\034\074\037\071\040\050\043\065\044" +
    "\062\045\101\046\025\047\016\050\023\051\017\052\024" +
    "\057\045\065\026\001\002\000\004\024\253\001\002\000" +
    "\004\024\uffe6\001\002\000\044\003\uffeb\031\uffeb\032\uffeb" +
    "\034\uffeb\036\uffeb\037\uffeb\040\uffeb\043\uffeb\044\uffeb\045" +
    "\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\057\uffeb" +
    "\065\uffeb\001\002\000\004\024\uffb7\001\002\000\004\024" +
    "\uffb6\001\002\000\044\003\ufff1\031\ufff1\032\ufff1\034\ufff1" +
    "\036\ufff1\037\ufff1\040\ufff1\043\ufff1\044\ufff1\045\ufff1\046" +
    "\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\057\ufff1\065\ufff1" +
    "\001\002\000\006\003\uffa4\041\uffa4\001\002\000\026\005" +
    "\107\014\112\021\114\061\124\062\131\063\120\064\110" +
    "\065\026\066\123\067\117\001\002\000\004\020\263\001" +
    "\002\000\006\003\037\041\036\001\002\000\046\003\uffa6" +
    "\031\uffa6\032\uffa6\033\265\034\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6" +
    "\051\uffa6\052\uffa6\057\uffa6\065\uffa6\001\002\000\006\003" +
    "\037\041\036\001\002\000\044\003\uffa5\031\uffa5\032\uffa5" +
    "\034\uffa5\036\uffa5\037\uffa5\040\uffa5\043\uffa5\044\uffa5\045" +
    "\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\057\uffa5" +
    "\065\uffa5\001\002\000\006\003\037\041\036\001\002\000" +
    "\044\003\uffa3\031\uffa3\032\uffa3\034\uffa3\036\uffa3\037\uffa3" +
    "\040\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050" +
    "\uffa3\051\uffa3\052\uffa3\057\uffa3\065\uffa3\001\002\000\044" +
    "\003\uffef\031\uffef\032\uffef\034\uffef\036\uffef\037\uffef\040" +
    "\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef\050\uffef" +
    "\051\uffef\052\uffef\057\uffef\065\uffef\001\002\000\044\003" +
    "\ufff0\031\ufff0\032\ufff0\034\ufff0\036\ufff0\037\ufff0\040\ufff0" +
    "\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051" +
    "\ufff0\052\ufff0\057\ufff0\065\ufff0\001\002\000\044\003\uffee" +
    "\031\uffee\032\uffee\034\uffee\036\uffee\037\uffee\040\uffee\043" +
    "\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee\051\uffee" +
    "\052\uffee\057\uffee\065\uffee\001\002\000\006\003\uffae\041" +
    "\uffae\001\002\000\014\046\025\047\016\050\023\051\017" +
    "\052\024\001\002\000\004\020\311\001\002\000\004\024" +
    "\304\001\002\000\004\017\301\001\002\000\036\005\107" +
    "\014\112\021\114\053\236\054\233\055\237\056\234\061" +
    "\124\062\131\063\120\064\110\065\026\066\123\067\117" +
    "\001\002\000\004\024\uffd5\001\002\000\004\024\uffd6\001" +
    "\002\000\026\005\107\014\112\021\114\061\124\062\131" +
    "\063\120\064\110\065\026\066\123\067\117\001\002\000" +
    "\004\024\306\001\002\000\004\065\026\001\002\000\004" +
    "\020\uffac\001\002\000\006\004\226\005\230\001\002\000" +
    "\006\003\037\041\036\001\002\000\044\003\uffaf\031\uffaf" +
    "\032\uffaf\034\uffaf\036\uffaf\037\uffaf\040\uffaf\043\uffaf\044" +
    "\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf" +
    "\057\uffaf\065\uffaf\001\002\000\006\003\037\041\036\001" +
    "\002\000\044\003\uffad\031\uffad\032\uffad\034\uffad\036\uffad" +
    "\037\uffad\040\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047" +
    "\uffad\050\uffad\051\uffad\052\uffad\057\uffad\065\uffad\001\002" +
    "\000\052\003\ufff5\025\ufff5\031\ufff5\032\ufff5\033\ufff5\034" +
    "\ufff5\036\ufff5\037\ufff5\040\ufff5\042\ufff5\043\ufff5\044\ufff5" +
    "\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\057" +
    "\ufff5\065\ufff5\001\002\000\006\003\uffde\041\uffde\001\002" +
    "\000\004\026\320\001\002\000\006\003\037\041\036\001" +
    "\002\000\044\003\uffe0\031\uffe0\032\uffe0\034\uffe0\036\uffe0" +
    "\037\uffe0\040\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047" +
    "\uffe0\050\uffe0\051\uffe0\052\uffe0\057\uffe0\065\uffe0\001\002" +
    "\000\006\003\037\041\036\001\002\000\044\003\uffdd\031" +
    "\uffdd\032\uffdd\034\uffdd\036\uffdd\037\uffdd\040\uffdd\043\uffdd" +
    "\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052" +
    "\uffdd\057\uffdd\065\uffdd\001\002\000\006\003\uffdc\041\uffdc" +
    "\001\002\000\006\003\037\041\036\001\002\000\044\003" +
    "\uffdf\031\uffdf\032\uffdf\034\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051" +
    "\uffdf\052\uffdf\057\uffdf\065\uffdf\001\002\000\006\003\037" +
    "\041\036\001\002\000\044\003\uffdb\031\uffdb\032\uffdb\034" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\043\uffdb\044\uffdb\045\uffdb" +
    "\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\057\uffdb\065" +
    "\uffdb\001\002\000\004\036\ufff4\001\002\000\004\036\334" +
    "\001\002\000\052\003\ufff7\025\ufff7\031\ufff7\032\ufff7\033" +
    "\ufff7\034\ufff7\036\ufff7\037\ufff7\040\ufff7\042\ufff7\043\ufff7" +
    "\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052" +
    "\ufff7\057\ufff7\065\ufff7\001\002\000\052\003\ufff8\025\ufff8" +
    "\031\ufff8\032\ufff8\033\ufff8\034\ufff8\036\ufff8\037\ufff8\040" +
    "\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8" +
    "\050\ufff8\051\ufff8\052\ufff8\057\ufff8\065\ufff8\001\002\000" +
    "\006\020\uffbb\023\uffbb\001\002\000\006\020\uffb8\023\uffb8" +
    "\001\002\000\006\003\037\041\036\001\002\000\010\003" +
    "\uffbc\025\uffbc\042\uffbc\001\002\000\004\021\342\001\002" +
    "\000\020\020\uffb9\023\uffb9\046\025\047\016\050\023\051" +
    "\017\052\024\001\002\000\006\020\344\023\034\001\002" +
    "\000\006\003\037\041\036\001\002\000\010\003\uffbe\025" +
    "\uffbe\042\uffbe\001\002\000\004\002\uffff\001\002\000\004" +
    "\036\350\001\002\000\004\002\000\001\002\000\006\003" +
    "\uffc1\025\uffc1\001\002\000\006\003\037\041\036\001\002" +
    "\000\004\036\ufff9\001\002\000\004\036\ufffb\001\002\000" +
    "\006\003\011\025\010\001\002\000\004\036\357\001\002" +
    "\000\004\002\ufffd\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\004\010\003\001\001\000\002\001\001\000" +
    "\004\067\354\001\001\000\012\002\013\011\006\012\011" +
    "\053\012\001\001\000\002\001\001\000\004\013\353\001" +
    "\001\000\004\070\351\001\001\000\006\011\350\012\011" +
    "\001\001\000\004\002\346\001\001\000\002\001\001\000" +
    "\004\005\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\062\340\001\001\000\004\076\336\001\001\000" +
    "\004\062\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\030\050\032\051\031\001\001\000\004\062\335" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\030\051\334\001\001\000\004\013\037\001\001\000\060" +
    "\003\331\004\043\005\076\006\053\014\060\015\041\021" +
    "\075\026\101\027\046\030\057\031\042\032\055\033\065" +
    "\034\077\036\052\037\072\046\066\047\063\052\054\057" +
    "\045\060\074\061\071\062\067\001\001\000\004\071\040" +
    "\001\001\000\002\001\001\000\060\003\050\004\043\005" +
    "\076\006\053\014\060\015\041\021\075\026\101\027\046" +
    "\030\057\031\042\032\055\033\065\034\077\036\052\037" +
    "\072\046\066\047\063\052\054\057\045\060\074\061\071" +
    "\062\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\003\330\004\043\005\076\006\053\014\060\015\041" +
    "\021\075\026\101\027\046\030\057\031\042\032\055\033" +
    "\065\034\077\036\052\037\072\046\066\047\063\052\054" +
    "\057\045\060\074\061\071\062\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\007\316" +
    "\016\104\024\126\025\121\040\132\041\115\042\105\043" +
    "\127\062\136\063\110\064\124\065\112\066\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\007" +
    "\255\016\104\024\126\025\121\040\132\041\115\042\105" +
    "\043\127\047\254\062\120\063\110\064\124\065\112\066" +
    "\103\001\001\000\006\072\250\073\251\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\224\023\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\062\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\007\131\016\104\024\126\025\121\040\132\041\115" +
    "\042\105\043\127\045\125\047\114\062\120\063\110\064" +
    "\124\065\112\066\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\056\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\016\173\041\115" +
    "\042\105\043\127\062\136\063\110\064\124\065\112\066" +
    "\103\001\001\000\002\001\001\000\032\016\104\024\126" +
    "\025\121\040\171\041\115\042\105\043\127\062\136\063" +
    "\110\064\124\065\112\066\103\001\001\000\002\001\001" +
    "\000\006\020\161\055\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\016\104\025\137\041\115\042\105\043\127" +
    "\062\136\063\110\064\124\065\112\066\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\007\144\016\104\024\126\025\121\040" +
    "\132\041\115\042\105\043\127\044\143\062\136\063\110" +
    "\064\124\065\112\066\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\007\144\016\104" +
    "\024\126\025\121\040\132\041\115\042\105\043\127\044" +
    "\146\062\136\063\110\064\124\065\112\066\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\042\163\043\127\062\136\063\110\064\124" +
    "\065\112\066\103\001\001\000\022\041\162\042\105\043" +
    "\127\062\136\063\110\064\124\065\112\066\103\001\001" +
    "\000\004\055\160\001\001\000\004\056\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\043\170\062\136\063\110\064\124\065\112\066\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\101\210\001\001\000\032\016\104" +
    "\024\126\025\121\040\202\041\115\042\105\043\127\062" +
    "\136\063\110\064\124\065\112\066\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\204\001\001\000" +
    "\002\001\001\000\004\100\206\001\001\000\004\013\207" +
    "\001\001\000\002\001\001\000\004\013\211\001\001\000" +
    "\002\001\001\000\004\062\213\001\001\000\002\001\001" +
    "\000\004\103\221\001\001\000\032\016\104\024\126\025" +
    "\121\040\216\041\115\042\105\043\127\062\136\063\110" +
    "\064\124\065\112\066\103\001\001\000\002\001\001\000" +
    "\004\013\220\001\001\000\002\001\001\000\004\013\222" +
    "\001\001\000\002\001\001\000\036\007\237\016\104\024" +
    "\126\025\121\040\132\041\115\042\105\043\127\054\234" +
    "\062\136\063\110\064\124\065\112\066\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\004\253\005\076\006\053\014\060\015\041" +
    "\021\075\026\101\027\046\030\057\031\042\032\055\033" +
    "\065\034\077\036\052\037\072\046\066\047\063\052\054" +
    "\057\045\060\074\061\071\062\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\102\266\001" +
    "\001\000\032\016\104\024\126\025\121\040\261\041\115" +
    "\042\105\043\127\062\136\063\110\064\124\065\112\066" +
    "\103\001\001\000\002\001\001\000\004\013\263\001\001" +
    "\000\002\001\001\000\004\013\265\001\001\000\002\001" +
    "\001\000\004\013\267\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\077" +
    "\312\001\001\000\014\005\076\035\275\057\277\060\276" +
    "\061\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\007\302\016\104\024\126\025\121" +
    "\040\132\041\115\042\105\043\127\054\301\062\136\063" +
    "\110\064\124\065\112\066\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\016\104\024\126\025\121\040" +
    "\304\041\115\042\105\043\127\062\136\063\110\064\124" +
    "\065\112\066\103\001\001\000\002\001\001\000\006\021" +
    "\306\062\307\001\001\000\002\001\001\000\006\022\224" +
    "\023\226\001\001\000\004\013\311\001\001\000\002\001" +
    "\001\000\004\013\313\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\074\321\001\001\000\002\001\001\000" +
    "\004\013\320\001\001\000\002\001\001\000\004\013\322" +
    "\001\001\000\002\001\001\000\004\075\326\001\001\000" +
    "\004\013\325\001\001\000\002\001\001\000\004\013\327" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\337\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\030\050\342\051\031" +
    "\001\001\000\002\001\001\000\004\013\344\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\352\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\355\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Node root = null;
    public int errors = 0;
    public int fatal = 0;
    //Lexer lexer = (Lexer) this.getScanner();

    public JavaSymbol getCurrentSymbol() {
        return (JavaSymbol) this.cur_token;
    }

    public void report_error(String message, Object info){
        StringBuilder m = new StringBuilder("");
        if(info instanceof java_cup.runtime.Symbol){
            m.append("Error: ");
            m.append(info);
            m.append(": " + message);
        } else {
            if (info instanceof String) {
                errors++;
                m.append("    "+ errors + "==> " + info + " "+ message+"\n");
            }
        }
        Editor.console.setText(Editor.console.getText() + m.toString() + "\n");
    }

    public void report_fatal_error(String message, Object info){
        fatal++;
        report_error(message, info);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= BEGIN Functions Main END 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node mn = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                    RESULT = new Node("PROG", f, mn);
                                    parser.root = RESULT;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= BEGIN Main END 
            {
              Node RESULT =null;
		int mnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node mn = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                    RESULT = new Node("PROG", mn);
                                    parser.root = RESULT;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Node RESULT =null;
 parser.report_error("syntax. Missing token 'begin'.","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= error NT$0 Main END 
            {
              Node RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Functions ::= FunctionList 
            {
              Node RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("FUNCTIONS",fl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Main ::= MAINBEGIN Statements 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("MAIN",st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Node RESULT =null;
 parser.report_error("token 'mainbegin'.","MISSING"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Main ::= error NT$1 Statements 
            {
              Node RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Statements ::= DO BodyList END 
            {
              Node RESULT =null;
		int bdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node bdl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = bdl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Statements ::= DO END 
            {
              Node RESULT =null;
		 RESULT = new Node("null"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Node RESULT =null;
 parser.report_error("block declaration syntax. Unmatched 'do' 'end' tokens.","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statements ::= error NT$2 BodyList END 
            {
              Node RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BodyList ::= BodyPart BodyList 
            {
              Node RESULT =null;
		int bpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node bp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bdl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bdl.add(bp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BodyList ::= BodyPart 
            {
              Node RESULT =null;
		int bpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("body", bp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BodyPart ::= Block 
            {
              Node RESULT =null;
		int bqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bq = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bq; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BodyPart ::= Instruccion PUNTOCOMA 
            {
              Node RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node ins = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ins; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BodyPart ::= Asignacion PUNTOCOMA 
            {
              Node RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node asig = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = asig; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BodyPart ::= Return PUNTOCOMA 
            {
              Node RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node ret = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ret; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BodyPart ::= Break PUNTOCOMA 
            {
              Node RESULT =null;
		int bkleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bkright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node bk = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = bk; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BodyPart ::= Case 
            {
              Node RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node cs = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$3 ::= 
            {
              Node RESULT =null;
 parser.report_error("start of expression.","ILLEGAL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BodyPart ::= error NT$3 BodyPart 
            {
              Node RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Instruccion ::= VarDeclare 
            {
              Node RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node vd = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruccion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Instruccion ::= VarInit 
            {
              Node RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int viright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node vi = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vi; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruccion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Instruccion ::= Llamado 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruccion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$4 ::= 
            {
              Node RESULT =null;
 parser.report_error("variable initialization, declaration or function call","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Instruccion ::= error NT$4 PUNTOCOMA 
            {
              Node RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruccion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Lectura ::= READINT PARIZQ PARDER 
            {
              Node RESULT =null;
		 RESULT = new Node("READINT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lectura",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Lectura ::= READDOUBLE PARIZQ PARDER 
            {
              Node RESULT =null;
		 RESULT = new Node("READDOUBLE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lectura",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Lectura ::= READSTRING PARIZQ PARDER 
            {
              Node RESULT =null;
		 RESULT = new Node("READSTRING"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lectura",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Lectura ::= READCHAR PARIZQ PARDER 
            {
              Node RESULT =null;
		 RESULT = new Node("READCHAR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lectura",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Break ::= BREAK 
            {
              Node RESULT =null;
		 RESULT = new Node("BREAK"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Break",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Case ::= CASE Value DOSPUNTOS Statements 
            {
              Node RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("CASE", val, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Case",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Case ::= OTHER DOSPUNTOS Statements 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("OTHER", st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Case",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$5 ::= 
            {
              Node RESULT =null;
 parser.report_error("'CASE' syntax.","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Case ::= CASE error NT$5 Statements 
            {
              Node RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Case",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$6 ::= 
            {
              Node RESULT =null;
 parser.report_error("'OTHER' syntax.","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Case ::= OTHER error NT$6 Statements 
            {
              Node RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Case",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VarDeclare ::= VarDeclarationList 
            {
              Node RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node vdl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT = vdl;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclare",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VarDeclarationList ::= VarDeclarationList COMA Identifier 
            {
              Node RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node vdl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node iden = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    iden.getData().setType(vdl.getData().getType());
                                    RESULT = vdl.add(iden);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclarationList",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VarDeclarationList ::= Type Identifier 
            {
              Node RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node tp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node iden = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    iden.getData().setType(tp.label); //habria que hacer clase Tipo propia?
                                    RESULT = new Node("declare", iden);
                                    RESULT.getData().setType(tp.label); //temporal solution so that every child of "declare" updates their type
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclarationList",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Identifier ::= IDENTIFICADOR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    JavaSymbol symbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(symbol.getLexeme(), "IDENTIFIER", null, symbol.getLine(), symbol.getColumn());
                                    RESULT = new Node(dat, id);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifier",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VarInit ::= VarDeclare ASIGNACION Value 
            {
              Node RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node vd = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node av = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    for (Node declared: vd.getChildren()) {
                                        declared.getData().setValue(av.getData().getValue());
                                    }
                                    RESULT = new Node("init",vd,av);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarInit",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VarInit ::= VarDeclare ASIGNACION Lectura 
            {
              Node RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node vd = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lec = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("init",vd,lec); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarInit",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Value ::= Expression 
            {
              Node RESULT =null;
		int ebleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node eb = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = eb; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Asignacion ::= Identifier ASIGNACION Value 
            {
              Node RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node iden = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("assign",iden,val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Asignacion ::= Identifier ASIGNACION Lectura 
            {
              Node RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node iden = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lec = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("assign",iden,lec); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Asignacion ::= ExprIncDec 
            {
              Node RESULT =null;
		int updateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int updateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node update = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = update; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Type ::= INT 
            {
              Node RESULT =null;
		 RESULT = new Node("int"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Type ::= DOUBLE 
            {
              Node RESULT =null;
		 RESULT = new Node("double"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Type ::= CHAR 
            {
              Node RESULT =null;
		 RESULT = new Node("char"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Type ::= BOOLEAN 
            {
              Node RESULT =null;
		 RESULT = new Node("boolean"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Type ::= STRING 
            {
              Node RESULT =null;
		 RESULT = new Node("string"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Llamado ::= Print 
            {
              Node RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node pr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Llamado",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Llamado ::= LlamadoMetodos 
            {
              Node RESULT =null;
		int lmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Llamado",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LlamadoMetodos ::= Identifier PARIZQ Contenido PARDER 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node cont = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("function_call",id,cont); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LlamadoMetodos",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LlamadoMetodos ::= Identifier PARIZQ PARDER 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Node("function_call", id, new Node("params",new Node("null"))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LlamadoMetodos",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Contenido ::= Value COMA Contenido 
            {
              Node RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node cont = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cont.add(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Contenido",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Contenido ::= Value 
            {
              Node RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("params",val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Contenido",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Print ::= PRINT PARIZQ PrintParam PARDER 
            {
              Node RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node pp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("PRINT", pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Print",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PrintParam ::= Value 
            {
              Node RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintParam",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PrintParam ::= LlamadoMetodos 
            {
              Node RESULT =null;
		int lmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintParam",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PrintParam ::= 
            {
              Node RESULT =null;
		 RESULT = new Node("null"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintParam",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FunctionList ::= FunctionPart FunctionList 
            {
              Node RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node fp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fl.add(fp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FunctionList ::= FunctionPart 
            {
              Node RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("body",fp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FunctionPart ::= FUNCTION VOID Identifier PARIZQ Parametros PARDER Statements 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node param = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    StringBuilder domain = new StringBuilder("");
                                    if (param.getChildren().size()>0) {
                                        for (Node iden : param.getChildren()){
                                            domain.append(iden.getData().getType().concat("x"));
                                        }
                                        domain.deleteCharAt(domain.length()-1);
                                    }

                                    FunctionType function = new FunctionType(id,domain.toString(),"void");
                                    Data data = id.getData();
                                    data.setValue(function);
                                    RESULT = new Node(data, id.label, param, st);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionPart",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FunctionPart ::= FUNCTION Type Identifier PARIZQ Parametros PARDER Statements 
            {
              Node RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Node tp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node param = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    StringBuilder domain = new StringBuilder("");
                                    if (param.getChildren().size()>0) {
                                        for (Node iden : param.getChildren()){
                                            domain.append(iden.getData().getType().concat("x"));
                                        }
                                        domain.deleteCharAt(domain.length()-1);
                                    }

                                    FunctionType function = new FunctionType(id, domain.toString(), tp.label);
                                    Data data = id.getData();
                                    data.setValue(function);
                                    RESULT = new Node(data, id.label, param, st);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionPart",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$7 ::= 
            {
              Node RESULT =null;

                                            parser.report_error("function declaration. Usage example: function <type> <id> () do ... end","WRONG");
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FunctionPart ::= FUNCTION error NT$7 Statements 
            {
              Node RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionPart",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Parametros ::= Parametros COMA Param 
            {
              Node RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node params = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node param = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = params.add(param); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Parametros ::= Param 
            {
              Node RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node param = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("parameters",param); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Parametros ::= 
            {
              Node RESULT =null;
		 RESULT = new Node("parameters"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Param ::= Type Identifier 
            {
              Node RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node tp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT = id;
                                    RESULT.getData().setType(tp.label);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Param",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Return ::= RETURN LlamadoMetodos 
            {
              Node RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node call = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("RETURN", call); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Return",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Return ::= RETURN Value 
            {
              Node RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("RETURN", val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Return",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Block ::= Loops 
            {
              Node RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Block ::= Conditional 
            {
              Node RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cond; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Loops ::= ForStmt 
            {
              Node RESULT =null;
		int flpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node flp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = flp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Loops",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Loops ::= WhileStmt 
            {
              Node RESULT =null;
		int wlpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wlpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node wlp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = wlp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Loops",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Conditional ::= IfStmt 
            {
              Node RESULT =null;
		int icleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int icright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ic = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ic; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Conditional",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Conditional ::= SwitchStmt 
            {
              Node RESULT =null;
		int swcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int swcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node swc = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = swc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Conditional",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ForStmt ::= FOR PARIZQ ForExpr PARDER Statements 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("FOR", expr, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$8 ::= 
            {
              Node RESULT =null;
 parser.report_error("FOR statement declaration","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ForStmt ::= FOR error NT$8 Statements 
            {
              Node RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ForExpr ::= VarInit PUNTOCOMA Expression PUNTOCOMA ExprIncDec 
            {
              Node RESULT =null;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node init = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int updateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int updateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node update = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("structure",init,expr,update); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForExpr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // WhileStmt ::= WHILE PARIZQ Expression PARDER Statements 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("WHILE",new Node("conditions",expr), st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$9 ::= 
            {
              Node RESULT =null;
 parser.report_error("WHILE statement declaration, missing boolean expression.","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // WhileStmt ::= WHILE PARIZQ PARDER error NT$9 Statements 
            {
              Node RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$10 ::= 
            {
              Node RESULT =null;
 parser.report_error("WHILE statement declaration. Usage example:\n\n\twhile (<boolean expression>) do \n\t\t...\n\tend","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // WhileStmt ::= WHILE error NT$10 Statements 
            {
              Node RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // IfStmt ::= IF PARIZQ Expression PARDER Statements 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("IF",new Node("conditions",expr), st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // IfStmt ::= IF PARIZQ Expression PARDER Statements ELSE Statements 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int st1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node st1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int st2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int st2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("IF",new Node("conditions",expr),st1,new Node("ELSE",st2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$11 ::= 
            {
              Node RESULT =null;
 parser.report_error("IF statement declaration. Usage example:\n\n\tif (<boolean expression>) do \n\t\t...\n\tend", "WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // IfStmt ::= IF error NT$11 Statements 
            {
              Node RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SwitchStmt ::= SWITCH PARIZQ Expression PARDER Statements 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("SWITCH", expr, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchStmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$12 ::= 
            {
              Node RESULT =null;
parser.report_error("SWITCH statement declaration.","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SwitchStmt ::= SWITCH error NT$12 Statements 
            {
              Node RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchStmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expression ::= BooleanExprList 
            {
              Node RESULT =null;
		int belleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int belright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bel = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bel; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // BooleanExprList ::= BooleanExprList LogicalOperator BooleanExprPart 
            {
              Node RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node list = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node lop = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int partleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int partright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node part = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(lop.label,list,part); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanExprList",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // BooleanExprList ::= BooleanExprPart 
            {
              Node RESULT =null;
		int partleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int partright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node part = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = part; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanExprList",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // BooleanExprPart ::= ExprComparacion 
            {
              Node RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ec = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ec; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanExprPart",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ExprComparacion ::= ArithmeticExpr RelationalOper ArithmeticExpr 
            {
              Node RESULT =null;
		int ae1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ae1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node ae1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oprelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oprelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node oprel = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ae2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ae2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ae2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(oprel.label, ae1, ae2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprComparacion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ExprComparacion ::= NOT ExprComparacion 
            {
              Node RESULT =null;
		int exprcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exprc = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("negation", exprc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprComparacion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ExprComparacion ::= ArithmeticExpr 
            {
              Node RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ae = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ae; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprComparacion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // RelationalOper ::= MAYOR 
            {
              Node RESULT =null;
		 RESULT = new Node(">"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOper",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // RelationalOper ::= MENOR 
            {
              Node RESULT =null;
		 RESULT = new Node("<"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOper",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // RelationalOper ::= MAYORIGUAL 
            {
              Node RESULT =null;
		 RESULT = new Node(">="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOper",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // RelationalOper ::= MENORIGUAL 
            {
              Node RESULT =null;
		 RESULT = new Node("<="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOper",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // RelationalOper ::= IGUAL 
            {
              Node RESULT =null;
		 RESULT = new Node("=="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOper",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // RelationalOper ::= DIFERENTE 
            {
              Node RESULT =null;
		 RESULT = new Node("!="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOper",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LogicalOperator ::= AND 
            {
              Node RESULT =null;
		 RESULT = new Node("AND"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LogicalOperator",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LogicalOperator ::= OR 
            {
              Node RESULT =null;
		 RESULT = new Node("OR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LogicalOperator",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ArithmeticExpr ::= ArithmeticExpr AddOrSubstract Factor 
            {
              Node RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node ea = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node aos = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = aos.add(ea,fct); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ArithmeticExpr ::= Factor 
            {
              Node RESULT =null;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fct; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Factor ::= Factor MultiplyOrDivide Term 
            {
              Node RESULT =null;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mdmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mdmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node mdm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int trmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node trm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = mdm.add(fct,trm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Factor ::= Term 
            {
              Node RESULT =null;
		int trmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node trm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = trm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Term ::= PARIZQ Expression PARDER 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Term ::= Literals 
            {
              Node RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lit = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // AddOrSubstract ::= SUMA 
            {
              Node RESULT =null;
		
                                    JavaSymbol symbol = (JavaSymbol)CUP$Parser$stack.peek();
                                    RESULT = new Node(new Data(symbol), "+");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOrSubstract",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // AddOrSubstract ::= MENOS 
            {
              Node RESULT =null;
		
                                    JavaSymbol symbol = (JavaSymbol)CUP$Parser$stack.peek();
                                    RESULT = new Node(new Data(symbol), "-");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOrSubstract",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // MultiplyOrDivide ::= MULT 
            {
              Node RESULT =null;
		
                                    JavaSymbol symbol = (JavaSymbol)CUP$Parser$stack.peek();
                                    RESULT = new Node(new Data(symbol), "*");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplyOrDivide",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // MultiplyOrDivide ::= DIV 
            {
              Node RESULT =null;
		
                                    JavaSymbol symbol = (JavaSymbol)CUP$Parser$stack.peek();
                                    RESULT = new Node(new Data(symbol), "/");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplyOrDivide",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // MultiplyOrDivide ::= MOD 
            {
              Node RESULT =null;
		
                                    JavaSymbol symbol = (JavaSymbol)CUP$Parser$stack.peek();
                                    RESULT = new Node(new Data(symbol), "%");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplyOrDivide",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Literals ::= NumLiterals 
            {
              Node RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node nl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = nl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literals",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Literals ::= StringLiterals 
            {
              Node RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literals",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Literals ::= BooleanLiterals 
            {
              Node RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literals",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Literals ::= Identifier 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literals",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NumLiterals ::= NUMERO 
            {
              Node RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    JavaSymbol symbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(symbol.getLexeme(), "NUMBER", num, symbol.getLine(), symbol.getColumn());
                                    RESULT = new Node(dat, Integer.toString(num));
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NumLiterals",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NumLiterals ::= REAL 
            {
              Node RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double real = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    JavaSymbol symbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(symbol.getLexeme(), "REAL", real, symbol.getLine(), symbol.getColumn());
                                    RESULT = new Node(dat, Double.toString(real));
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NumLiterals",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NumLiterals ::= MENOS NUMERO 
            {
              Node RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    JavaSymbol symbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(symbol.getLexeme(), "NUMBER", num*-1, symbol.getLine(), symbol.getColumn());
                                    RESULT = new Node(dat, Integer.toString(num*-1));
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NumLiterals",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NumLiterals ::= MENOS REAL 
            {
              Node RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double real = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    JavaSymbol symbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(symbol.getLexeme(), "REAL", real*-1, symbol.getLine(), symbol.getColumn());
                                    RESULT = new Node(dat, Double.toString(real*-1));
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NumLiterals",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // StringLiterals ::= CADENA 
            {
              Node RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    JavaSymbol symbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(symbol.getLexeme(), "STRING", str, symbol.getLine(), symbol.getColumn());
                                    RESULT = new Node(dat,"\""+str+"\"");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StringLiterals",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // StringLiterals ::= CARACTER 
            {
              Node RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character ch = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    JavaSymbol symbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(symbol.getLexeme(), "CHARACTER", ch, symbol.getLine(), symbol.getColumn());
                                    RESULT = new Node(dat, ("'").concat(Character.toString(ch)).concat("'"));
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StringLiterals",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // BooleanLiterals ::= TRUE 
            {
              Node RESULT =null;
		
                                    JavaSymbol symbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(symbol.getLexeme(), "TRUE", new Boolean(true), symbol.getLine(), symbol.getColumn());
                                    RESULT = new Node(dat, "true");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanLiterals",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // BooleanLiterals ::= FALSE 
            {
              Node RESULT =null;
		
                                    JavaSymbol symbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(symbol.getLexeme(), "FALSE", new Boolean(false), symbol.getLine(), symbol.getColumn());
                                    RESULT = new Node(dat, "false");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanLiterals",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ExprIncDec ::= Identifier Incremento 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("increase", id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprIncDec",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ExprIncDec ::= Identifier Decremento 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("decrease", id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprIncDec",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Incremento ::= SUMA SUMA 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Incremento",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Decremento ::= MENOS MENOS 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decremento",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

