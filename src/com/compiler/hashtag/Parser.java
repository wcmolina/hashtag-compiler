
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140611 (SVN rev 31)
// Sat May 23 12:57:07 CST 2015
//----------------------------------------------------

package com.compiler.hashtag;

import com.compiler.ast.Data;
import com.compiler.ast.Node;

/** CUP v0.11b 20140611 (SVN rev 31) generated parser.
  * @version Sat May 23 12:57:07 CST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\210\000\002\002\004\000\002\010\006\000\002\010" +
    "\005\000\002\066\002\000\002\010\006\000\002\054\003" +
    "\000\002\002\004\000\002\067\002\000\002\002\005\000" +
    "\002\013\005\000\002\013\004\000\002\070\002\000\002" +
    "\013\006\000\002\003\004\000\002\003\003\000\002\004" +
    "\004\000\002\004\003\000\002\004\004\000\002\004\004" +
    "\000\002\071\002\000\002\004\005\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\072\002\000\002" +
    "\014\005\000\002\055\005\000\002\055\005\000\002\055" +
    "\005\000\002\055\005\000\002\056\003\000\002\060\005" +
    "\000\002\060\004\000\002\061\003\000\002\057\005\000" +
    "\002\057\005\000\002\007\003\000\002\006\005\000\002" +
    "\006\005\000\002\006\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\015\003\000\002\015\003\000\002\050\006\000" +
    "\002\050\005\000\002\045\005\000\002\045\003\000\002" +
    "\051\005\000\002\051\003\000\002\051\002\000\002\052" +
    "\004\000\002\047\006\000\002\046\003\000\002\046\003" +
    "\000\002\046\002\000\002\011\004\000\002\011\003\000" +
    "\002\012\011\000\002\012\011\000\002\073\002\000\002" +
    "\012\006\000\002\053\004\000\002\053\004\000\002\026" +
    "\003\000\002\026\003\000\002\027\003\000\002\027\003" +
    "\000\002\030\003\000\002\030\003\000\002\031\007\000" +
    "\002\074\002\000\002\031\006\000\002\035\007\000\002" +
    "\032\007\000\002\075\002\000\002\032\010\000\002\076" +
    "\002\000\002\032\006\000\002\033\007\000\002\033\011" +
    "\000\002\077\002\000\002\033\006\000\002\034\011\000" +
    "\002\034\011\000\002\100\002\000\002\034\006\000\002" +
    "\037\004\000\002\037\003\000\002\040\010\000\002\040" +
    "\007\000\002\101\002\000\002\040\006\000\002\036\003" +
    "\000\002\036\003\000\002\041\003\000\002\024\005\000" +
    "\002\024\003\000\002\025\003\000\002\016\005\000\002" +
    "\016\004\000\002\016\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\017\003\000\002\017\003\000" +
    "\002\042\005\000\002\042\005\000\002\042\003\000\002" +
    "\043\005\000\002\043\005\000\002\043\005\000\002\043" +
    "\003\000\002\044\005\000\002\044\003\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\064\003\000\002\064\003\000\002\063\003\000\002" +
    "\063\003\000\002\065\003\000\002\065\003\000\002\021" +
    "\004\000\002\021\004\000\002\022\004\000\002\023\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\006\003\005\035\006\001\002\000\004\002" +
    "\366\001\002\000\006\003\ufffe\025\ufffe\001\002\000\010" +
    "\003\011\025\010\042\015\001\002\000\006\003\ufffc\025" +
    "\ufffc\001\002\000\006\003\036\041\035\001\002\000\006" +
    "\003\ufffa\041\ufffa\001\002\000\010\003\uffc5\025\uffc5\042" +
    "\015\001\002\000\006\003\011\025\010\001\002\000\004" +
    "\036\354\001\002\000\020\003\021\046\025\047\020\050" +
    "\023\051\016\052\024\060\022\001\002\000\004\065\uffd5" +
    "\001\002\000\004\065\347\001\002\000\004\065\uffd8\001" +
    "\002\000\006\003\uffc2\041\uffc2\001\002\000\004\065\026" +
    "\001\002\000\004\065\uffd7\001\002\000\004\065\uffd6\001" +
    "\002\000\004\065\uffd9\001\002\000\004\021\027\001\002" +
    "\000\020\020\uffcc\023\uffcc\046\025\047\020\050\023\051" +
    "\016\052\024\001\002\000\004\065\071\001\002\000\006" +
    "\020\uffcd\023\uffcd\001\002\000\006\020\034\023\033\001" +
    "\002\000\014\046\025\047\020\050\023\051\016\052\024" +
    "\001\002\000\006\003\036\041\035\001\002\000\036\003" +
    "\067\031\075\032\055\034\045\036\341\037\053\044\051" +
    "\045\070\046\025\047\020\050\023\051\016\052\024\065" +
    "\071\001\002\000\034\003\ufff6\031\ufff6\032\ufff6\034\ufff6" +
    "\037\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051" +
    "\ufff6\052\ufff6\065\ufff6\001\002\000\010\003\uffc4\025\uffc4" +
    "\042\uffc4\001\002\000\034\003\067\031\075\032\055\034" +
    "\045\037\053\044\051\045\070\046\025\047\020\050\023" +
    "\051\016\052\024\065\071\001\002\000\036\003\uffb9\031" +
    "\uffb9\032\uffb9\034\uffb9\036\uffb9\037\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\065\uffb9\001" +
    "\002\000\036\003\067\031\075\032\055\034\045\036\ufff3" +
    "\037\053\044\051\045\070\046\025\047\020\050\023\051" +
    "\016\052\024\065\071\001\002\000\036\003\uffbc\031\uffbc" +
    "\032\uffbc\034\uffbc\036\uffbc\037\uffbc\044\uffbc\045\uffbc\046" +
    "\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\065\uffbc\001\002" +
    "\000\004\024\uffeb\001\002\000\006\003\324\021\325\001" +
    "\002\000\006\017\103\024\uffec\001\002\000\004\036\323" +
    "\001\002\000\004\024\uffea\001\002\000\024\014\111\021" +
    "\113\061\123\062\132\063\117\064\107\065\071\066\122" +
    "\067\115\001\002\000\004\024\uffd3\001\002\000\006\003" +
    "\261\021\262\001\002\000\036\003\uffbd\031\uffbd\032\uffbd" +
    "\034\uffbd\036\uffbd\037\uffbd\044\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\050\uffbd\051\uffbd\052\uffbd\065\uffbd\001\002\000\006" +
    "\003\250\021\251\001\002\000\004\024\uffd4\001\002\000" +
    "\004\065\071\001\002\000\004\024\246\001\002\000\036" +
    "\003\uffbe\031\uffbe\032\uffbe\034\uffbe\036\uffbe\037\uffbe\044" +
    "\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe" +
    "\065\uffbe\001\002\000\012\004\206\005\207\017\243\021" +
    "\225\001\002\000\036\003\ufff1\031\ufff1\032\ufff1\034\ufff1" +
    "\036\ufff1\037\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050" +
    "\ufff1\051\ufff1\052\ufff1\065\ufff1\001\002\000\004\024\242" +
    "\001\002\000\036\003\uffbb\031\uffbb\032\uffbb\034\uffbb\036" +
    "\uffbb\037\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb" +
    "\051\uffbb\052\uffbb\065\uffbb\001\002\000\010\017\uffe3\023" +
    "\240\024\uffe3\001\002\000\036\003\uffee\024\uffe9\031\uffee" +
    "\032\uffee\034\uffee\037\uffee\044\uffee\045\uffee\046\uffee\047" +
    "\uffee\050\uffee\051\uffee\052\uffee\065\uffee\001\002\000\004" +
    "\021\217\001\002\000\046\004\uffe0\005\uffe0\006\uffe0\007" +
    "\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\027" +
    "\uffe0\030\uffe0\001\002\000\004\024\216\001\002\000\004" +
    "\024\uffda\001\002\000\036\003\uffba\031\uffba\032\uffba\034" +
    "\uffba\036\uffba\037\uffba\044\uffba\045\uffba\046\uffba\047\uffba" +
    "\050\uffba\051\uffba\052\uffba\065\uffba\001\002\000\006\003" +
    "\076\021\077\001\002\000\006\003\uffb7\041\uffb7\001\002" +
    "\000\014\046\025\047\020\050\023\051\016\052\024\001" +
    "\002\000\004\020\212\001\002\000\004\024\177\001\002" +
    "\000\004\017\103\001\002\000\034\014\111\021\113\053" +
    "\130\054\116\055\133\056\126\061\123\062\132\063\117" +
    "\064\107\065\071\066\122\067\115\001\002\000\014\020" +
    "\uff9c\023\uff9c\024\uff9c\027\uff9c\030\uff9c\001\002\000\042" +
    "\004\uff85\005\uff85\006\uff85\007\uff85\010\uff85\011\uff85\012" +
    "\uff85\013\uff85\015\uff85\016\uff85\020\uff85\022\uff85\023\uff85" +
    "\024\uff85\027\uff85\030\uff85\001\002\000\042\004\uff8e\005" +
    "\uff8e\006\167\007\166\010\uff8e\011\uff8e\012\uff8e\013\uff8e" +
    "\015\uff8e\016\uff8e\020\uff8e\022\165\023\uff8e\024\uff8e\027" +
    "\uff8e\030\uff8e\001\002\000\042\004\uff81\005\uff81\006\uff81" +
    "\007\uff81\010\uff81\011\uff81\012\uff81\013\uff81\015\uff81\016" +
    "\uff81\020\uff81\022\uff81\023\uff81\024\uff81\027\uff81\030\uff81" +
    "\001\002\000\042\004\uff88\005\uff88\006\uff88\007\uff88\010" +
    "\uff88\011\uff88\012\uff88\013\uff88\015\uff88\016\uff88\020\uff88" +
    "\022\uff88\023\uff88\024\uff88\027\uff88\030\uff88\001\002\000" +
    "\024\014\111\021\113\061\123\062\132\063\117\064\107" +
    "\065\071\066\122\067\115\001\002\000\042\004\uff87\005" +
    "\uff87\006\uff87\007\uff87\010\uff87\011\uff87\012\uff87\013\uff87" +
    "\015\uff87\016\uff87\020\uff87\022\uff87\023\uff87\024\uff87\027" +
    "\uff87\030\uff87\001\002\000\024\014\111\021\113\061\123" +
    "\062\132\063\117\064\107\065\071\066\122\067\115\001" +
    "\002\000\034\004\155\005\153\010\157\011\154\012\156" +
    "\013\152\015\161\016\160\020\uff99\023\uff99\024\uff99\027" +
    "\uff99\030\uff99\001\002\000\042\004\uff7f\005\uff7f\006\uff7f" +
    "\007\uff7f\010\uff7f\011\uff7f\012\uff7f\013\uff7f\015\uff7f\016" +
    "\uff7f\020\uff7f\022\uff7f\023\uff7f\024\uff7f\027\uff7f\030\uff7f" +
    "\001\002\000\004\021\150\001\002\000\042\004\uff80\005" +
    "\uff80\006\uff80\007\uff80\010\uff80\011\uff80\012\uff80\013\uff80" +
    "\015\uff80\016\uff80\020\uff80\022\uff80\023\uff80\024\uff80\027" +
    "\uff80\030\uff80\001\002\000\042\004\uff84\005\uff84\006\uff84" +
    "\007\uff84\010\uff84\011\uff84\012\uff84\013\uff84\015\uff84\016" +
    "\uff84\020\uff84\022\uff84\023\uff84\024\uff84\027\uff84\030\uff84" +
    "\001\002\000\014\020\uff9d\023\uff9d\024\uff9d\027\uff9d\030" +
    "\uff9d\001\002\000\042\004\uff7e\005\uff7e\006\uff7e\007\uff7e" +
    "\010\uff7e\011\uff7e\012\uff7e\013\uff7e\015\uff7e\016\uff7e\020" +
    "\uff7e\022\uff7e\023\uff7e\024\uff7e\027\uff7e\030\uff7e\001\002" +
    "\000\042\004\uff83\005\uff83\006\uff83\007\uff83\010\uff83\011" +
    "\uff83\012\uff83\013\uff83\015\uff83\016\uff83\020\uff83\022\uff83" +
    "\023\uff83\024\uff83\027\uff83\030\uff83\001\002\000\042\004" +
    "\uff86\005\uff86\006\uff86\007\uff86\010\uff86\011\uff86\012\uff86" +
    "\013\uff86\015\uff86\016\uff86\020\uff86\022\uff86\023\uff86\024" +
    "\uff86\027\uff86\030\uff86\001\002\000\014\020\uff9f\023\uff9f" +
    "\024\uff9f\027\144\030\146\001\002\000\004\021\142\001" +
    "\002\000\004\024\uffde\001\002\000\004\021\140\001\002" +
    "\000\042\004\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a\011" +
    "\uff8a\012\uff8a\013\uff8a\015\uff8a\016\uff8a\020\uff8a\022\uff8a" +
    "\023\uff8a\024\uff8a\027\uff8a\030\uff8a\001\002\000\042\004" +
    "\uff82\005\uff82\006\uff82\007\uff82\010\uff82\011\uff82\012\uff82" +
    "\013\uff82\015\uff82\016\uff82\020\uff82\022\uff82\023\uff82\024" +
    "\uff82\027\uff82\030\uff82\001\002\000\004\021\136\001\002" +
    "\000\004\024\uffdf\001\002\000\010\020\uffdd\023\uffdd\024" +
    "\uffdd\001\002\000\004\020\137\001\002\000\004\024\uffe7" +
    "\001\002\000\004\020\141\001\002\000\004\024\uffe5\001" +
    "\002\000\004\020\143\001\002\000\004\024\uffe6\001\002" +
    "\000\024\014\uff92\021\uff92\061\uff92\062\uff92\063\uff92\064" +
    "\uff92\065\uff92\066\uff92\067\uff92\001\002\000\024\014\111" +
    "\021\113\061\123\062\132\063\117\064\107\065\071\066" +
    "\122\067\115\001\002\000\024\014\uff91\021\uff91\061\uff91" +
    "\062\uff91\063\uff91\064\uff91\065\uff91\066\uff91\067\uff91\001" +
    "\002\000\014\020\uff9e\023\uff9e\024\uff9e\027\uff9e\030\uff9e" +
    "\001\002\000\004\020\151\001\002\000\004\024\uffe4\001" +
    "\002\000\022\021\uff95\061\uff95\062\uff95\063\uff95\064\uff95" +
    "\065\uff95\066\uff95\067\uff95\001\002\000\022\021\113\061" +
    "\123\062\132\063\117\064\107\065\071\066\122\067\115" +
    "\001\002\000\022\021\uff97\061\uff97\062\uff97\063\uff97\064" +
    "\uff97\065\uff97\066\uff97\067\uff97\001\002\000\022\021\113" +
    "\061\123\062\132\063\117\064\107\065\071\066\122\067" +
    "\115\001\002\000\022\021\uff96\061\uff96\062\uff96\063\uff96" +
    "\064\uff96\065\uff96\066\uff96\067\uff96\001\002\000\022\021" +
    "\uff98\061\uff98\062\uff98\063\uff98\064\uff98\065\uff98\066\uff98" +
    "\067\uff98\001\002\000\022\021\uff94\061\uff94\062\uff94\063" +
    "\uff94\064\uff94\065\uff94\066\uff94\067\uff94\001\002\000\022" +
    "\021\uff93\061\uff93\062\uff93\063\uff93\064\uff93\065\uff93\066" +
    "\uff93\067\uff93\001\002\000\022\021\113\061\123\062\132" +
    "\063\117\064\107\065\071\066\122\067\115\001\002\000" +
    "\020\004\155\005\153\020\uff9b\023\uff9b\024\uff9b\027\uff9b" +
    "\030\uff9b\001\002\000\042\004\uff90\005\uff90\006\167\007" +
    "\166\010\uff90\011\uff90\012\uff90\013\uff90\015\uff90\016\uff90" +
    "\020\uff90\022\165\023\uff90\024\uff90\027\uff90\030\uff90\001" +
    "\002\000\022\021\113\061\123\062\132\063\117\064\107" +
    "\065\071\066\122\067\115\001\002\000\022\021\113\061" +
    "\123\062\132\063\117\064\107\065\071\066\122\067\115" +
    "\001\002\000\022\021\113\061\123\062\132\063\117\064" +
    "\107\065\071\066\122\067\115\001\002\000\042\004\uff8c" +
    "\005\uff8c\006\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013" +
    "\uff8c\015\uff8c\016\uff8c\020\uff8c\022\uff8c\023\uff8c\024\uff8c" +
    "\027\uff8c\030\uff8c\001\002\000\042\004\uff8d\005\uff8d\006" +
    "\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d\015\uff8d" +
    "\016\uff8d\020\uff8d\022\uff8d\023\uff8d\024\uff8d\027\uff8d\030" +
    "\uff8d\001\002\000\042\004\uff8b\005\uff8b\006\uff8b\007\uff8b" +
    "\010\uff8b\011\uff8b\012\uff8b\013\uff8b\015\uff8b\016\uff8b\020" +
    "\uff8b\022\uff8b\023\uff8b\024\uff8b\027\uff8b\030\uff8b\001\002" +
    "\000\042\004\uff8f\005\uff8f\006\167\007\166\010\uff8f\011" +
    "\uff8f\012\uff8f\013\uff8f\015\uff8f\016\uff8f\020\uff8f\022\165" +
    "\023\uff8f\024\uff8f\027\uff8f\030\uff8f\001\002\000\004\020" +
    "\175\001\002\000\042\004\uff89\005\uff89\006\uff89\007\uff89" +
    "\010\uff89\011\uff89\012\uff89\013\uff89\015\uff89\016\uff89\020" +
    "\uff89\022\uff89\023\uff89\024\uff89\027\uff89\030\uff89\001\002" +
    "\000\014\020\uff9a\023\uff9a\024\uff9a\027\uff9a\030\uff9a\001" +
    "\002\000\024\014\111\021\113\061\123\062\132\063\117" +
    "\064\107\065\071\066\122\067\115\001\002\000\004\024" +
    "\201\001\002\000\004\065\071\001\002\000\004\020\uffb5" +
    "\001\002\000\006\004\206\005\207\001\002\000\006\020" +
    "\uff7d\024\uff7d\001\002\000\006\020\uff7c\024\uff7c\001\002" +
    "\000\004\004\211\001\002\000\004\005\210\001\002\000" +
    "\006\020\uff7a\024\uff7a\001\002\000\006\020\uff7b\024\uff7b" +
    "\001\002\000\006\003\036\041\035\001\002\000\036\003" +
    "\uffb8\031\uffb8\032\uffb8\034\uffb8\036\uffb8\037\uffb8\044\uffb8" +
    "\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\065" +
    "\uffb8\001\002\000\006\003\036\041\035\001\002\000\036" +
    "\003\uffb6\031\uffb6\032\uffb6\034\uffb6\036\uffb6\037\uffb6\044" +
    "\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6" +
    "\065\uffb6\001\002\000\036\003\ufff0\031\ufff0\032\ufff0\034" +
    "\ufff0\036\ufff0\037\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0" +
    "\050\ufff0\051\ufff0\052\ufff0\065\ufff0\001\002\000\026\014" +
    "\111\020\uffc7\021\113\061\123\062\132\063\117\064\107" +
    "\065\071\066\122\067\115\001\002\000\004\020\uffc8\001" +
    "\002\000\042\004\uff84\005\uff84\006\uff84\007\uff84\010\uff84" +
    "\011\uff84\012\uff84\013\uff84\015\uff84\016\uff84\020\uff84\021" +
    "\225\022\uff84\024\uff84\027\uff84\030\uff84\001\002\000\004" +
    "\020\224\001\002\000\004\020\uffc9\001\002\000\004\024" +
    "\uffca\001\002\000\026\014\111\020\226\021\113\061\123" +
    "\062\132\063\117\064\107\065\071\066\122\067\115\001" +
    "\002\000\006\020\uffd1\024\uffd1\001\002\000\004\020\233" +
    "\001\002\000\006\020\uffcf\023\231\001\002\000\024\014" +
    "\111\021\113\061\123\062\132\063\117\064\107\065\071" +
    "\066\122\067\115\001\002\000\004\020\uffd0\001\002\000" +
    "\006\020\uffd2\024\uffd2\001\002\000\034\003\067\031\075" +
    "\032\055\034\045\037\053\044\051\045\070\046\025\047" +
    "\020\050\023\051\016\052\024\065\071\001\002\000\004" +
    "\024\236\001\002\000\004\024\uffe8\001\002\000\036\003" +
    "\uffed\031\uffed\032\uffed\034\uffed\036\uffed\037\uffed\044\uffed" +
    "\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed\065" +
    "\uffed\001\002\000\004\065\071\001\002\000\010\017\uffe2" +
    "\023\uffe2\024\uffe2\001\002\000\036\003\uffef\031\uffef\032" +
    "\uffef\034\uffef\036\uffef\037\uffef\044\uffef\045\uffef\046\uffef" +
    "\047\uffef\050\uffef\051\uffef\052\uffef\065\uffef\001\002\000" +
    "\034\014\111\021\113\053\130\054\116\055\133\056\126" +
    "\061\123\062\132\063\117\064\107\065\071\066\122\067" +
    "\115\001\002\000\004\024\uffdb\001\002\000\004\024\uffdc" +
    "\001\002\000\036\003\ufff2\031\ufff2\032\ufff2\034\ufff2\036" +
    "\ufff2\037\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2" +
    "\051\ufff2\052\ufff2\065\ufff2\001\002\000\010\017\uffe1\023" +
    "\uffe1\024\uffe1\001\002\000\006\003\uffad\041\uffad\001\002" +
    "\000\024\014\111\021\113\061\123\062\132\063\117\064" +
    "\107\065\071\066\122\067\115\001\002\000\004\020\253" +
    "\001\002\000\006\003\036\041\035\001\002\000\040\003" +
    "\uffaf\031\uffaf\032\uffaf\033\255\034\uffaf\036\uffaf\037\uffaf" +
    "\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052" +
    "\uffaf\065\uffaf\001\002\000\006\003\036\041\035\001\002" +
    "\000\036\003\uffae\031\uffae\032\uffae\034\uffae\036\uffae\037" +
    "\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae" +
    "\052\uffae\065\uffae\001\002\000\006\003\036\041\035\001" +
    "\002\000\036\003\uffac\031\uffac\032\uffac\034\uffac\036\uffac" +
    "\037\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051" +
    "\uffac\052\uffac\065\uffac\001\002\000\006\040\uffa9\057\uffa9" +
    "\001\002\000\010\061\263\063\265\065\071\001\002\000" +
    "\006\020\uffa1\026\uffa1\001\002\000\004\020\313\001\002" +
    "\000\006\020\uffa0\026\uffa0\001\002\000\004\020\267\001" +
    "\002\000\004\041\270\001\002\000\006\040\274\057\271" +
    "\001\002\000\004\026\307\001\002\000\042\003\uffa6\031" +
    "\uffa6\032\uffa6\034\uffa6\036\uffa6\037\uffa6\040\274\044\uffa6" +
    "\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\057" +
    "\271\065\uffa6\001\002\000\004\036\305\001\002\000\010" +
    "\003\276\061\263\063\265\001\002\000\004\026\301\001" +
    "\002\000\006\003\uffa3\041\uffa3\001\002\000\006\003\036" +
    "\041\035\001\002\000\042\003\uffa2\031\uffa2\032\uffa2\034" +
    "\uffa2\036\uffa2\037\uffa2\040\uffa2\044\uffa2\045\uffa2\046\uffa2" +
    "\047\uffa2\050\uffa2\051\uffa2\052\uffa2\057\uffa2\065\uffa2\001" +
    "\002\000\006\003\036\041\035\001\002\000\004\043\303" +
    "\001\002\000\004\024\304\001\002\000\042\003\uffa5\031" +
    "\uffa5\032\uffa5\034\uffa5\036\uffa5\037\uffa5\040\uffa5\044\uffa5" +
    "\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\057" +
    "\uffa5\065\uffa5\001\002\000\036\003\uffab\031\uffab\032\uffab" +
    "\034\uffab\036\uffab\037\uffab\044\uffab\045\uffab\046\uffab\047" +
    "\uffab\050\uffab\051\uffab\052\uffab\065\uffab\001\002\000\036" +
    "\003\uffa7\031\uffa7\032\uffa7\034\uffa7\036\uffa7\037\uffa7\044" +
    "\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7" +
    "\065\uffa7\001\002\000\006\003\036\041\035\001\002\000" +
    "\004\043\311\001\002\000\004\024\312\001\002\000\042" +
    "\003\uffa4\031\uffa4\032\uffa4\034\uffa4\036\uffa4\037\uffa4\040" +
    "\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4" +
    "\052\uffa4\057\uffa4\065\uffa4\001\002\000\004\041\314\001" +
    "\002\000\006\040\274\057\271\001\002\000\004\036\316" +
    "\001\002\000\036\003\uffaa\031\uffaa\032\uffaa\034\uffaa\036" +
    "\uffaa\037\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa" +
    "\051\uffaa\052\uffaa\065\uffaa\001\002\000\006\040\274\057" +
    "\271\001\002\000\036\003\uffa8\031\uffa8\032\uffa8\034\uffa8" +
    "\036\uffa8\037\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050" +
    "\uffa8\051\uffa8\052\uffa8\065\uffa8\001\002\000\004\024\uffc0" +
    "\001\002\000\004\024\uffbf\001\002\000\052\003\ufff5\025" +
    "\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\036\ufff5\037\ufff5" +
    "\040\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047" +
    "\ufff5\050\ufff5\051\ufff5\052\ufff5\057\ufff5\065\ufff5\001\002" +
    "\000\006\003\uffb1\041\uffb1\001\002\000\026\014\111\020" +
    "\326\021\113\061\123\062\132\063\117\064\107\065\071" +
    "\066\122\067\115\001\002\000\004\003\332\001\002\000" +
    "\004\020\330\001\002\000\006\003\036\041\035\001\002" +
    "\000\036\003\uffb4\031\uffb4\032\uffb4\034\uffb4\036\uffb4\037" +
    "\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4" +
    "\052\uffb4\065\uffb4\001\002\000\006\003\uffb3\041\uffb3\001" +
    "\002\000\006\003\036\041\035\001\002\000\036\003\uffb2" +
    "\031\uffb2\032\uffb2\034\uffb2\036\uffb2\037\uffb2\044\uffb2\045" +
    "\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\065\uffb2" +
    "\001\002\000\006\003\036\041\035\001\002\000\036\003" +
    "\uffb0\031\uffb0\032\uffb0\034\uffb0\036\uffb0\037\uffb0\044\uffb0" +
    "\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\065" +
    "\uffb0\001\002\000\004\036\ufff4\001\002\000\004\036\342" +
    "\001\002\000\052\003\ufff7\025\ufff7\031\ufff7\032\ufff7\033" +
    "\ufff7\034\ufff7\036\ufff7\037\ufff7\040\ufff7\042\ufff7\043\ufff7" +
    "\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052" +
    "\ufff7\057\ufff7\065\ufff7\001\002\000\052\003\ufff8\025\ufff8" +
    "\031\ufff8\032\ufff8\033\ufff8\034\ufff8\036\ufff8\037\ufff8\040" +
    "\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8" +
    "\050\ufff8\051\ufff8\052\ufff8\057\ufff8\065\ufff8\001\002\000" +
    "\006\020\uffce\023\uffce\001\002\000\006\020\uffcb\023\uffcb" +
    "\001\002\000\006\003\036\041\035\001\002\000\010\003" +
    "\uffc1\025\uffc1\042\uffc1\001\002\000\004\021\350\001\002" +
    "\000\020\020\uffcc\023\uffcc\046\025\047\020\050\023\051" +
    "\016\052\024\001\002\000\006\020\352\023\033\001\002" +
    "\000\006\003\036\041\035\001\002\000\010\003\uffc3\025" +
    "\uffc3\042\uffc3\001\002\000\004\002\uffff\001\002\000\004" +
    "\036\356\001\002\000\004\002\000\001\002\000\006\003" +
    "\uffc6\025\uffc6\001\002\000\006\003\036\041\035\001\002" +
    "\000\004\036\ufff9\001\002\000\004\036\ufffb\001\002\000" +
    "\006\003\011\025\010\001\002\000\004\036\365\001\002" +
    "\000\004\002\ufffd\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\004\010\003\001\001\000\002\001\001\000" +
    "\004\066\362\001\001\000\012\002\013\011\006\012\011" +
    "\054\012\001\001\000\002\001\001\000\004\013\361\001" +
    "\001\000\004\067\357\001\001\000\006\011\356\012\011" +
    "\001\001\000\004\002\354\001\001\000\002\001\001\000" +
    "\004\005\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\073\344\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\027\051\031\052\030\001" +
    "\001\000\004\061\343\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\027\052\342\001\001\000\004\013" +
    "\036\001\001\000\054\003\337\004\041\005\056\006\071" +
    "\014\057\015\047\021\072\026\062\027\060\030\053\031" +
    "\042\032\064\033\073\034\040\047\055\050\051\053\063" +
    "\056\045\057\043\060\065\061\061\001\001\000\004\070" +
    "\037\001\001\000\002\001\001\000\054\003\046\004\041" +
    "\005\056\006\071\014\057\015\047\021\072\026\062\027" +
    "\060\030\053\031\042\032\064\033\073\034\040\047\055" +
    "\050\051\053\063\056\045\057\043\060\065\061\061\001" +
    "\001\000\002\001\001\000\054\003\336\004\041\005\056" +
    "\006\071\014\057\015\047\021\072\026\062\027\060\030" +
    "\053\031\042\032\064\033\073\034\040\047\055\050\051" +
    "\053\063\056\045\057\043\060\065\061\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\007" +
    "\321\016\103\024\124\025\120\041\134\042\113\043\105" +
    "\044\130\050\320\061\220\062\107\063\123\064\111\065" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\061" +
    "\246\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\203\023\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\071\233" +
    "\072\234\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\074\213\001\001\000\014\005\056\035" +
    "\077\056\101\057\100\060\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\007\133\016" +
    "\103\024\124\025\120\041\134\042\113\043\105\044\130" +
    "\055\126\061\117\062\107\063\123\064\111\065\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\016\175\042" +
    "\113\043\105\044\130\061\117\062\107\063\123\064\111" +
    "\065\104\001\001\000\002\001\001\000\032\016\103\024" +
    "\124\025\120\041\173\042\113\043\105\044\130\061\117" +
    "\062\107\063\123\064\111\065\104\001\001\000\004\020" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\016" +
    "\103\025\146\042\113\043\105\044\130\061\117\062\107" +
    "\063\123\064\111\065\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\043\172\044\130\061\117\062\107\063" +
    "\123\064\111\065\104\001\001\000\002\001\001\000\020" +
    "\043\163\044\130\061\117\062\107\063\123\064\111\065" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\042\162\043\105\044" +
    "\130\061\117\062\107\063\123\064\111\065\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\044\171\061" +
    "\117\062\107\063\123\064\111\065\104\001\001\000\016" +
    "\044\170\061\117\062\107\063\123\064\111\065\104\001" +
    "\001\000\016\044\167\061\117\062\107\063\123\064\111" +
    "\065\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\016\103\024\124\025" +
    "\120\041\177\042\113\043\105\044\130\061\117\062\107" +
    "\063\123\064\111\065\104\001\001\000\002\001\001\000" +
    "\006\021\201\061\202\001\001\000\002\001\001\000\006" +
    "\022\203\023\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\212\001\001\000\002\001" +
    "\001\000\004\013\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\007\222\016\103\024\124\025\120\041" +
    "\134\042\113\043\105\044\130\046\221\050\217\061\220" +
    "\062\107\063\123\064\111\065\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\007\227\016\103\024\124\025" +
    "\120\041\134\042\113\043\105\044\130\045\226\061\117" +
    "\062\107\063\123\064\111\065\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\007\227" +
    "\016\103\024\124\025\120\041\134\042\113\043\105\044" +
    "\130\045\231\061\117\062\107\063\123\064\111\065\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\004" +
    "\236\005\056\006\071\014\057\015\047\021\072\026\062" +
    "\027\060\030\053\031\042\032\064\033\073\034\040\047" +
    "\055\050\051\053\063\056\045\057\043\060\065\061\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\240\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\007\244\016\103\024\124\025\120\041" +
    "\134\042\113\043\105\044\130\055\243\061\117\062\107" +
    "\063\123\064\111\065\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\077\256\001\001\000\032\016\103\024\124\025\120\041" +
    "\251\042\113\043\105\044\130\061\117\062\107\063\123" +
    "\064\111\065\104\001\001\000\002\001\001\000\004\013" +
    "\253\001\001\000\002\001\001\000\004\013\255\001\001" +
    "\000\002\001\001\000\004\013\257\001\001\000\002\001" +
    "\001\000\004\100\316\001\001\000\006\036\263\061\265" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\037\272" +
    "\040\271\001\001\000\002\001\001\000\006\037\305\040" +
    "\271\001\001\000\002\001\001\000\004\036\274\001\001" +
    "\000\002\001\001\000\004\101\276\001\001\000\004\013" +
    "\277\001\001\000\002\001\001\000\004\013\301\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\307\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\037\314\040\271\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\037\317\040\271\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\076\334\001\001\000\032\016" +
    "\103\024\124\025\120\041\326\042\113\043\105\044\130" +
    "\061\117\062\107\063\123\064\111\065\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\330\001\001" +
    "\000\002\001\001\000\004\075\332\001\001\000\004\013" +
    "\333\001\001\000\002\001\001\000\004\013\335\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\345\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\027\051\350\052\030\001\001" +
    "\000\002\001\001\000\004\013\352\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\360\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\363\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Node root = null;
    public int errors = 0;
    public int fatal = 0;
    //Lexer lexer = (Lexer) this.getScanner();

    public JavaSymbol getCurrentSymbol() {
        return (JavaSymbol) this.cur_token;
    }

    public void report_error(String message, Object info){
        StringBuilder m = new StringBuilder("");
        if(info instanceof java_cup.runtime.Symbol){
            m.append("Error: ");
            m.append(info);
            m.append(" : " + message);
        } else {
            if (info instanceof String) {
                errors++;
                m.append("    "+ errors + "==> " + info + " "+ message+"\n");
            }
        }
        Editor.console.setText(Editor.console.getText() + m.toString() + "\n");
    }

    public void report_fatal_error(String message, Object info){
        fatal++;
        report_error(message, info);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= BEGIN Functions Main END 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node mn = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                    RESULT = new Node("PROG", f, mn);
                                    parser.root = RESULT;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= BEGIN Main END 
            {
              Node RESULT =null;
		int mnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node mn = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                    RESULT = new Node("PROG", mn);
                                    parser.root = RESULT;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Node RESULT =null;
 parser.report_error("syntax. Missing token 'begin'.","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= error NT$0 Main END 
            {
              Node RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Functions ::= FunctionList 
            {
              Node RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("FUNCTIONS",fl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Main ::= MAINBEGIN Statements 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("MAIN",st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Node RESULT =null;
 parser.report_error("token 'mainbegin'.","MISSING"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Main ::= error NT$1 Statements 
            {
              Node RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Statements ::= DO BodyList END 
            {
              Node RESULT =null;
		int bdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node bdl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = bdl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Statements ::= DO END 
            {
              Node RESULT =null;
		 RESULT = new Node("..."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Node RESULT =null;
 parser.report_error("block declaration syntax. Unmatched 'do' 'end' tokens.","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statements ::= error NT$2 BodyList END 
            {
              Node RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BodyList ::= BodyPart BodyList 
            {
              Node RESULT =null;
		int bpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node bp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bdl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bdl.add(bp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BodyList ::= BodyPart 
            {
              Node RESULT =null;
		int bpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("body", bp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BodyPart ::= Instruccion PUNTOCOMA 
            {
              Node RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node ins = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ins; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BodyPart ::= Block 
            {
              Node RESULT =null;
		int bqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bq = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bq; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BodyPart ::= Asignacion PUNTOCOMA 
            {
              Node RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node asig = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = asig; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BodyPart ::= Return PUNTOCOMA 
            {
              Node RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node ret = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ret; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$3 ::= 
            {
              Node RESULT =null;
 parser.report_error("start of expression.","ILLEGAL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BodyPart ::= error NT$3 BodyPart 
            {
              Node RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Instruccion ::= VarDeclare 
            {
              Node RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node vd = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruccion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Instruccion ::= VarInit 
            {
              Node RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int viright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node vi = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vi; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruccion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Instruccion ::= Llamado 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruccion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$4 ::= 
            {
              Node RESULT =null;
 parser.report_error("variable initialization, declaration or function call","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Instruccion ::= error NT$4 PUNTOCOMA 
            {
              Node RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruccion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Lectura ::= READINT PARIZQ PARDER 
            {
              Node RESULT =null;
		 RESULT = new Node("READINT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lectura",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Lectura ::= READDOUBLE PARIZQ PARDER 
            {
              Node RESULT =null;
		 RESULT = new Node("READDOUBLE"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lectura",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Lectura ::= READSTRING PARIZQ PARDER 
            {
              Node RESULT =null;
		 RESULT = new Node("READSTRING"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lectura",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Lectura ::= READCHAR PARIZQ PARDER 
            {
              Node RESULT =null;
		 RESULT = new Node("READCHAR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lectura",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VarDeclare ::= VarDeclarationList 
            {
              Node RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node vdl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT = vdl;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclare",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VarDeclarationList ::= VarDeclarationList COMA Identifier 
            {
              Node RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node vdl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node iden = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    iden.getData().setType(vdl.getData().getType());
                                    RESULT = vdl.add(iden);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclarationList",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VarDeclarationList ::= Type Identifier 
            {
              Node RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node tp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node iden = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    iden.getData().setType(tp.label); //habria que hacer clase Tipo propia?
                                    RESULT = new Node("declare", iden);
                                    RESULT.getData().setType(tp.label); //temporal solution so that every child of "declare" updates their type
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclarationList",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Identifier ::= IDENTIFICADOR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    JavaSymbol symbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(symbol.getLexeme(), "IDENTIFIER", null, symbol.getLine(), symbol.getColumn());
                                    RESULT = new Node(dat, id);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifier",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VarInit ::= VarDeclare ASIGNACION Value 
            {
              Node RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node vd = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node av = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    for (Node declared: vd.getChildren()) {
                                        declared.getData().setValue(av.getData().getValue());
                                    }
                                    RESULT = new Node("init",vd,av);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarInit",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VarInit ::= VarDeclare ASIGNACION Lectura 
            {
              Node RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node vd = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lec = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("init",vd,lec); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarInit",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Value ::= Expression 
            {
              Node RESULT =null;
		int ebleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node eb = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = eb; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Asignacion ::= Identifier ASIGNACION Value 
            {
              Node RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node iden = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("assign",iden,val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Asignacion ::= Identifier ASIGNACION Lectura 
            {
              Node RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node iden = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lec = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("assign",iden,lec); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Asignacion ::= ExprIncDec 
            {
              Node RESULT =null;
		int updateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int updateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node update = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = update; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Type ::= INT 
            {
              Node RESULT =null;
		 RESULT = new Node("int"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Type ::= DOUBLE 
            {
              Node RESULT =null;
		 RESULT = new Node("double"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Type ::= CHAR 
            {
              Node RESULT =null;
		 RESULT = new Node("char"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Type ::= BOOLEAN 
            {
              Node RESULT =null;
		 RESULT = new Node("boolean"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Type ::= STRING 
            {
              Node RESULT =null;
		 RESULT = new Node("string"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Llamado ::= Print 
            {
              Node RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node pr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Llamado",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Llamado ::= LlamadoMetodos 
            {
              Node RESULT =null;
		int lmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Llamado",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LlamadoMetodos ::= Identifier PARIZQ Contenido PARDER 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node cont = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("function_call",id,cont); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LlamadoMetodos",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LlamadoMetodos ::= Identifier PARIZQ PARDER 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Node("function_call", id, new Node("params",new Node("?"))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LlamadoMetodos",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Contenido ::= Value COMA Contenido 
            {
              Node RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node cont = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cont.add(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Contenido",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Contenido ::= Value 
            {
              Node RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("params",val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Contenido",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Parametros ::= Parametros COMA Param 
            {
              Node RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node params = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node param = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = params.add(param); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Parametros ::= Param 
            {
              Node RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node param = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("parameters",param); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Parametros ::= 
            {
              Node RESULT =null;
		 RESULT = new Node("..."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Param ::= Type Identifier 
            {
              Node RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node tp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT = id;
                                    RESULT.getData().setType(tp.label);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Param",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Print ::= PRINT PARIZQ PrintParam PARDER 
            {
              Node RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node pp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("PRINT", pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Print",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PrintParam ::= Value 
            {
              Node RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintParam",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PrintParam ::= LlamadoMetodos 
            {
              Node RESULT =null;
		int lmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintParam",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PrintParam ::= 
            {
              Node RESULT =null;
		 RESULT = new Node("..."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintParam",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FunctionList ::= FunctionPart FunctionList 
            {
              Node RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node fp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fl.add(fp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FunctionList ::= FunctionPart 
            {
              Node RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("body",fp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FunctionPart ::= FUNCTION VOID IDENTIFICADOR PARIZQ Parametros PARDER Statements 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node param = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(id, param, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionPart",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FunctionPart ::= FUNCTION Type IDENTIFICADOR PARIZQ Parametros PARDER Statements 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node param = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(id, param, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionPart",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$5 ::= 
            {
              Node RESULT =null;

                                            parser.report_error("function declaration. Usage example: function <type> <id> () do ... end","WRONG");
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FunctionPart ::= FUNCTION error NT$5 Statements 
            {
              Node RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionPart",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Return ::= RETURN LlamadoMetodos 
            {
              Node RESULT =null;
		int lmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("RETURN",lm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Return",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Return ::= RETURN Value 
            {
              Node RESULT =null;
		int avleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node av = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("RETURN", av); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Return",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Block ::= Loops 
            {
              Node RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Block ::= Conditional 
            {
              Node RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cond; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Loops ::= ForStmt 
            {
              Node RESULT =null;
		int flpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node flp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = flp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Loops",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Loops ::= WhileStmt 
            {
              Node RESULT =null;
		int wlpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wlpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node wlp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = wlp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Loops",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Conditional ::= IfStmt 
            {
              Node RESULT =null;
		int icleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int icright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ic = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ic; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Conditional",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Conditional ::= SwitchStmt 
            {
              Node RESULT =null;
		int swcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int swcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node swc = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = swc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Conditional",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ForStmt ::= FOR PARIZQ ForExpr PARDER Statements 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("FOR", expr, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$6 ::= 
            {
              Node RESULT =null;
 parser.report_error("FOR statement declaration","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ForStmt ::= FOR error NT$6 Statements 
            {
              Node RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ForExpr ::= VarInit PUNTOCOMA Expression PUNTOCOMA ExprIncDec 
            {
              Node RESULT =null;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node init = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int updateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int updateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node update = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("structure",init,expr,update); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForExpr",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // WhileStmt ::= WHILE PARIZQ Expression PARDER Statements 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("WHILE",new Node("conditions",expr), st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$7 ::= 
            {
              Node RESULT =null;
 parser.report_error("WHILE statement declaration, missing boolean expression.","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // WhileStmt ::= WHILE PARIZQ PARDER error NT$7 Statements 
            {
              Node RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$8 ::= 
            {
              Node RESULT =null;
 parser.report_error("WHILE statement declaration. Usage example:\n\n\twhile (<boolean expression>) do \n\t\t...\n\tend","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // WhileStmt ::= WHILE error NT$8 Statements 
            {
              Node RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // IfStmt ::= IF PARIZQ Expression PARDER Statements 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("IF",new Node("conditions",expr), st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IfStmt ::= IF PARIZQ Expression PARDER Statements ELSE Statements 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int st1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node st1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int st2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int st2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("IF",new Node("conditions",expr),st1,new Node("ELSE",st2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$9 ::= 
            {
              Node RESULT =null;
 parser.report_error("IF statement declaration. Usage example:\n\n\tif (<boolean expression>) do \n\t\t...\n\tend", "WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IfStmt ::= IF error NT$9 Statements 
            {
              Node RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SwitchStmt ::= SWITCH PARIZQ Identifier PARDER DO SwitchExprList END 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exprlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exprl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("SWITCH", id, exprl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchStmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SwitchStmt ::= SWITCH PARIZQ Switch PARDER DO SwitchExprList END 
            {
              Node RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node sw = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exprlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exprl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("SWITCH", sw, exprl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchStmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$10 ::= 
            {
              Node RESULT =null;
parser.report_error("SWITCH statement declaration.","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SwitchStmt ::= SWITCH error NT$10 SwitchExprList 
            {
              Node RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchStmt",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SwitchExprList ::= SwitchExprPart SwitchExprList 
            {
              Node RESULT =null;
		int exprpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exprp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exprlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exprl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exprl.add(exprp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchExprList",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SwitchExprList ::= SwitchExprPart 
            {
              Node RESULT =null;
		int exprpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exprp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("body",exprp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchExprList",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SwitchExprPart ::= CASE Switch DOSPUNTOS Statements BREAK PUNTOCOMA 
            {
              Node RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node sw = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Node("CASE", sw, st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchExprPart",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SwitchExprPart ::= OTHER DOSPUNTOS Statements BREAK PUNTOCOMA 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Node("OTHER", st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchExprPart",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$11 ::= 
            {
              Node RESULT =null;
parser.report_error("CASE syntax in SWITCH statement.","WRONG");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SwitchExprPart ::= CASE error NT$11 Statements 
            {
              Node RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchExprPart",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Switch ::= NUMERO 
            {
              Node RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(Integer.toString(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Switch",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Switch ::= CARACTER 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(Character.toString(c)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Switch",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expression ::= BooleanExprList 
            {
              Node RESULT =null;
		int belleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int belright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bel = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bel; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // BooleanExprList ::= BooleanExprList LogicalOperator BooleanExprPart 
            {
              Node RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node list = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node lop = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int partleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int partright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node part = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(lop.label,list,part); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanExprList",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // BooleanExprList ::= BooleanExprPart 
            {
              Node RESULT =null;
		int partleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int partright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node part = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = part; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanExprList",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // BooleanExprPart ::= ExprComparacion 
            {
              Node RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ec = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ec; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanExprPart",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ExprComparacion ::= ArithmeticExpr RelationalOper ArithmeticExpr 
            {
              Node RESULT =null;
		int ae1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ae1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node ae1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oprelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oprelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node oprel = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ae2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ae2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ae2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node(oprel.label, ae1, ae2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprComparacion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ExprComparacion ::= NOT ExprComparacion 
            {
              Node RESULT =null;
		int exprcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exprc = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("negation", exprc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprComparacion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ExprComparacion ::= ArithmeticExpr 
            {
              Node RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ae = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ae; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprComparacion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // RelationalOper ::= MAYOR 
            {
              Node RESULT =null;
		 RESULT = new Node(">"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOper",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // RelationalOper ::= MENOR 
            {
              Node RESULT =null;
		 RESULT = new Node("<"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOper",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // RelationalOper ::= MAYORIGUAL 
            {
              Node RESULT =null;
		 RESULT = new Node(">="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOper",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // RelationalOper ::= MENORIGUAL 
            {
              Node RESULT =null;
		 RESULT = new Node("<="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOper",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // RelationalOper ::= IGUAL 
            {
              Node RESULT =null;
		 RESULT = new Node("=="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOper",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // RelationalOper ::= DIFERENTE 
            {
              Node RESULT =null;
		 RESULT = new Node("!="); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOper",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LogicalOperator ::= AND 
            {
              Node RESULT =null;
		 RESULT = new Node("AND"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LogicalOperator",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LogicalOperator ::= OR 
            {
              Node RESULT =null;
		 RESULT = new Node("OR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LogicalOperator",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ArithmeticExpr ::= ArithmeticExpr SUMA Factor 
            {
              Node RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node ea = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("+",ea,fct); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ArithmeticExpr ::= ArithmeticExpr MENOS Factor 
            {
              Node RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node ea = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("-",ea,fct); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ArithmeticExpr ::= Factor 
            {
              Node RESULT =null;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fct; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Factor ::= Factor MULT Term 
            {
              Node RESULT =null;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int trmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node trm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("*",fct,trm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Factor ::= Factor DIV Term 
            {
              Node RESULT =null;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int trmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node trm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("/",fct,trm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Factor ::= Factor MOD Term 
            {
              Node RESULT =null;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int trmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node trm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("%",fct,trm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Factor ::= Term 
            {
              Node RESULT =null;
		int trmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node trm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = trm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Term ::= PARIZQ Expression PARDER 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Term ::= Literals 
            {
              Node RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lit = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Literals ::= NumLiterals 
            {
              Node RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node nl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = nl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literals",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Literals ::= StringLiterals 
            {
              Node RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literals",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Literals ::= BooleanLiterals 
            {
              Node RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literals",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Literals ::= Identifier 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literals",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NumLiterals ::= NUMERO 
            {
              Node RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    JavaSymbol symbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(symbol.getLexeme(), "NUMBER", num, symbol.getLine(), symbol.getColumn());
                                    RESULT = new Node(dat, Integer.toString(num));
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NumLiterals",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NumLiterals ::= REAL 
            {
              Node RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double real = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    JavaSymbol symbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(symbol.getLexeme(), "REAL", real, symbol.getLine(), symbol.getColumn());
                                    RESULT = new Node(dat, Double.toString(real));
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NumLiterals",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // StringLiterals ::= CADENA 
            {
              Node RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    JavaSymbol symbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(symbol.getLexeme(), "STRING", str, symbol.getLine(), symbol.getColumn());
                                    RESULT = new Node(dat,"\""+str+"\"");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StringLiterals",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // StringLiterals ::= CARACTER 
            {
              Node RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character ch = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    JavaSymbol symbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(symbol.getLexeme(), "CHARACTER", ch, symbol.getLine(), symbol.getColumn());
                                    RESULT = new Node(dat, ("'").concat(Character.toString(ch)).concat("'"));
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StringLiterals",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // BooleanLiterals ::= TRUE 
            {
              Node RESULT =null;
		
                                    JavaSymbol symbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(symbol.getLexeme(), "TRUE", new Boolean(true), symbol.getLine(), symbol.getColumn());
                                    RESULT = new Node(dat, "true");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanLiterals",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // BooleanLiterals ::= FALSE 
            {
              Node RESULT =null;
		
                                    JavaSymbol symbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(symbol.getLexeme(), "FALSE", new Boolean(false), symbol.getLine(), symbol.getColumn());
                                    RESULT = new Node(dat, "false");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanLiterals",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ExprIncDec ::= Identifier Incremento 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("increase", id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprIncDec",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ExprIncDec ::= Identifier Decremento 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("decrease", id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprIncDec",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Incremento ::= SUMA SUMA 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Incremento",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Decremento ::= MENOS MENOS 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decremento",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

