
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140611 (SVN rev 31)
// Sun Jun 28 18:10:30 CST 2015
//----------------------------------------------------

package com.compiler.hashtag;

import com.compiler.ast.Data;
import com.compiler.ast.Node;
import com.compiler.ast.FunctionType;
import java_cup.runtime.Symbol;

/** CUP v0.11b 20140611 (SVN rev 31) generated parser.
  * @version Sun Jun 28 18:10:30 CST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\221\000\002\002\004\000\002\010\006\000\002\010" +
    "\005\000\002\072\002\000\002\010\006\000\002\057\003" +
    "\000\002\002\004\000\002\073\002\000\002\002\005\000" +
    "\002\013\005\000\002\013\004\000\002\074\002\000\002" +
    "\013\006\000\002\003\004\000\002\003\003\000\002\004" +
    "\003\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\075\002\000" +
    "\002\004\005\000\002\014\003\000\002\014\003\000\002" +
    "\076\002\000\002\014\005\000\002\077\002\000\002\060" +
    "\006\000\002\100\002\000\002\060\006\000\002\101\002" +
    "\000\002\060\006\000\002\102\002\000\002\060\006\000" +
    "\002\035\003\000\002\036\006\000\002\036\005\000\002" +
    "\103\002\000\002\036\006\000\002\104\002\000\002\036" +
    "\006\000\002\037\003\000\002\040\003\000\002\063\005" +
    "\000\002\063\004\000\002\064\003\000\002\064\005\000" +
    "\002\065\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\006\005\000\002\006\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\015\003\000\002\015\003\000" +
    "\002\053\006\000\002\053\005\000\002\045\005\000\002" +
    "\045\003\000\002\052\006\000\002\046\003\000\002\046" +
    "\002\000\002\011\004\000\002\011\003\000\002\012\011" +
    "\000\002\012\011\000\002\105\002\000\002\012\006\000" +
    "\002\054\005\000\002\054\003\000\002\054\002\000\002" +
    "\055\004\000\002\056\004\000\002\047\003\000\002\025" +
    "\003\000\002\025\003\000\002\026\003\000\002\026\003" +
    "\000\002\027\003\000\002\027\003\000\002\030\007\000" +
    "\002\106\002\000\002\030\006\000\002\034\007\000\002" +
    "\031\007\000\002\107\002\000\002\031\010\000\002\110" +
    "\002\000\002\031\006\000\002\032\007\000\002\032\011" +
    "\000\002\111\002\000\002\032\006\000\002\033\007\000" +
    "\002\112\002\000\002\033\006\000\002\041\003\000\002" +
    "\023\005\000\002\023\003\000\002\024\005\000\002\024" +
    "\003\000\002\016\005\000\002\016\004\000\002\016\003" +
    "\000\002\051\003\000\002\050\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\042\005\000\002\042" +
    "\003\000\002\043\005\000\002\043\003\000\002\044\005" +
    "\000\002\044\003\000\002\061\003\000\002\061\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\066\003\000\002\066\003\000\002\066\003\000\002\066" +
    "\003\000\002\070\003\000\002\070\003\000\002\070\004" +
    "\000\002\070\004\000\002\067\003\000\002\067\003\000" +
    "\002\071\003\000\002\071\003\000\002\020\004\000\002" +
    "\020\004\000\002\021\004\000\002\022\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\363\000\006\003\005\035\006\001\002\000\004\002" +
    "\365\001\002\000\006\003\ufffe\025\ufffe\001\002\000\010" +
    "\003\011\025\010\042\015\001\002\000\006\003\ufffc\025" +
    "\ufffc\001\002\000\006\003\037\041\036\001\002\000\006" +
    "\003\ufffa\041\ufffa\001\002\000\010\003\uffbc\025\uffbc\042" +
    "\015\001\002\000\006\003\011\025\010\001\002\000\004" +
    "\036\353\001\002\000\020\003\021\046\025\047\016\050" +
    "\022\051\017\052\024\060\023\001\002\000\004\065\uffca" +
    "\001\002\000\004\065\uffc7\001\002\000\004\065\026\001" +
    "\002\000\006\003\uffb9\041\uffb9\001\002\000\004\065\uffc9" +
    "\001\002\000\004\065\026\001\002\000\004\065\uffc8\001" +
    "\002\000\004\065\uffcb\001\002\000\050\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\015" +
    "\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1" +
    "\024\uffd1\026\uffd1\027\uffd1\030\uffd1\001\002\000\004\021" +
    "\030\001\002\000\020\020\uffb5\023\uffb5\046\025\047\016" +
    "\050\022\051\017\052\024\001\002\000\004\065\026\001" +
    "\002\000\006\020\uffb6\023\uffb6\001\002\000\006\020\035" +
    "\023\034\001\002\000\014\046\025\047\016\050\022\051" +
    "\017\052\024\001\002\000\006\003\037\041\036\001\002" +
    "\000\044\003\063\031\052\032\060\034\073\036\340\037" +
    "\070\040\047\043\064\044\062\045\102\046\025\047\016" +
    "\050\022\051\017\052\024\057\045\065\026\001\002\000" +
    "\042\003\ufff6\031\ufff6\032\ufff6\034\ufff6\037\ufff6\040\ufff6" +
    "\043\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051" +
    "\ufff6\052\ufff6\057\ufff6\065\ufff6\001\002\000\010\003\uffbb" +
    "\025\uffbb\042\uffbb\001\002\000\042\003\063\031\052\032" +
    "\060\034\073\037\070\040\047\043\064\044\062\045\102" +
    "\046\025\047\016\050\022\051\017\052\024\057\045\065" +
    "\026\001\002\000\004\024\uffe9\001\002\000\044\003\uffaf" +
    "\031\uffaf\032\uffaf\034\uffaf\036\uffaf\037\uffaf\040\uffaf\043" +
    "\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf" +
    "\052\uffaf\057\uffaf\065\uffaf\001\002\000\044\003\063\031" +
    "\052\032\060\034\073\036\ufff3\037\070\040\047\043\064" +
    "\044\062\045\102\046\025\047\016\050\022\051\017\052" +
    "\024\057\045\065\026\001\002\000\006\003\333\026\uffd6" +
    "\001\002\000\044\003\uffb1\031\uffb1\032\uffb1\034\uffb1\036" +
    "\uffb1\037\uffb1\040\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1" +
    "\047\uffb1\050\uffb1\051\uffb1\052\uffb1\057\uffb1\065\uffb1\001" +
    "\002\000\040\003\330\005\uffd7\014\uffd7\021\uffd7\053\uffd7" +
    "\054\uffd7\055\uffd7\056\uffd7\061\uffd7\062\uffd7\063\uffd7\064" +
    "\uffd7\065\uffd7\066\uffd7\067\uffd7\001\002\000\004\036\327" +
    "\001\002\000\004\024\uffc5\001\002\000\006\003\312\021" +
    "\313\001\002\000\004\024\311\001\002\000\004\024\310" +
    "\001\002\000\036\005\107\014\112\021\113\053\134\054" +
    "\120\055\137\056\132\061\130\062\136\063\122\064\110" +
    "\065\026\066\125\067\116\001\002\000\044\003\uffae\031" +
    "\uffae\032\uffae\034\uffae\036\uffae\037\uffae\040\uffae\043\uffae" +
    "\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052" +
    "\uffae\057\uffae\065\uffae\001\002\000\044\003\uffb0\031\uffb0" +
    "\032\uffb0\034\uffb0\036\uffb0\037\uffb0\040\uffb0\043\uffb0\044" +
    "\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0" +
    "\057\uffb0\065\uffb0\001\002\000\006\003\276\021\277\001" +
    "\002\000\004\024\275\001\002\000\036\005\uffb2\014\uffb2" +
    "\021\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\061\uffb2\062" +
    "\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\001\002" +
    "\000\044\003\uffec\024\uffe8\031\uffec\032\uffec\034\uffec\037" +
    "\uffec\040\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec" +
    "\050\uffec\051\uffec\052\uffec\057\uffec\065\uffec\001\002\000" +
    "\004\024\uffde\001\002\000\044\003\uffad\031\uffad\032\uffad" +
    "\034\uffad\036\uffad\037\uffad\040\uffad\043\uffad\044\uffad\045" +
    "\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\057\uffad" +
    "\065\uffad\001\002\000\004\024\uffc6\001\002\000\012\004" +
    "\263\005\265\017\261\021\163\001\002\000\006\003\252" +
    "\021\253\001\002\000\036\005\107\014\112\021\113\053" +
    "\134\054\120\055\137\056\132\061\130\062\136\063\122" +
    "\064\110\065\026\066\125\067\116\001\002\000\006\023" +
    "\245\024\uffea\001\002\000\006\003\232\021\233\001\002" +
    "\000\004\026\230\001\002\000\004\024\uffcc\001\002\000" +
    "\004\024\227\001\002\000\004\065\026\001\002\000\044" +
    "\003\uffed\031\uffed\032\uffed\034\uffed\036\uffed\037\uffed\040" +
    "\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed\050\uffed" +
    "\051\uffed\052\uffed\057\uffed\065\uffed\001\002\000\044\003" +
    "\uffac\031\uffac\032\uffac\034\uffac\036\uffac\037\uffac\040\uffac" +
    "\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051" +
    "\uffac\052\uffac\057\uffac\065\uffac\001\002\000\004\021\104" +
    "\001\002\000\044\003\ufff2\031\ufff2\032\ufff2\034\ufff2\036" +
    "\ufff2\037\ufff2\040\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2" +
    "\047\ufff2\050\ufff2\051\ufff2\052\ufff2\057\ufff2\065\ufff2\001" +
    "\002\000\040\005\107\014\112\020\uffbe\021\113\053\134" +
    "\054\120\055\137\056\132\061\130\062\136\063\122\064" +
    "\110\065\026\066\125\067\116\001\002\000\044\004\uff7e" +
    "\005\uff7e\006\uff7e\007\uff7e\010\uff7e\011\uff7e\012\uff7e\013" +
    "\uff7e\015\uff7e\016\uff7e\020\uff7e\022\uff7e\023\uff7e\024\uff7e" +
    "\026\uff7e\027\uff7e\030\uff7e\001\002\000\044\004\uff8a\005" +
    "\uff8a\006\213\007\212\010\uff8a\011\uff8a\012\uff8a\013\uff8a" +
    "\015\uff8a\016\uff8a\020\uff8a\022\211\023\uff8a\024\uff8a\026" +
    "\uff8a\027\uff8a\030\uff8a\001\002\000\006\061\221\062\222" +
    "\001\002\000\044\004\uff78\005\uff78\006\uff78\007\uff78\010" +
    "\uff78\011\uff78\012\uff78\013\uff78\015\uff78\016\uff78\020\uff78" +
    "\022\uff78\023\uff78\024\uff78\026\uff78\027\uff78\030\uff78\001" +
    "\002\000\044\004\uff86\005\uff86\006\uff86\007\uff86\010\uff86" +
    "\011\uff86\012\uff86\013\uff86\015\uff86\016\uff86\020\uff86\022" +
    "\uff86\023\uff86\024\uff86\026\uff86\027\uff86\030\uff86\001\002" +
    "\000\026\005\107\014\112\021\113\061\130\062\136\063" +
    "\122\064\110\065\026\066\125\067\116\001\002\000\026" +
    "\005\107\014\112\021\113\061\130\062\136\063\122\064" +
    "\110\065\026\066\125\067\116\001\002\000\044\004\uff80" +
    "\005\uff80\006\uff80\007\uff80\010\uff80\011\uff80\012\uff80\013" +
    "\uff80\015\uff80\016\uff80\020\uff80\022\uff80\023\uff80\024\uff80" +
    "\026\uff80\027\uff80\030\uff80\001\002\000\036\004\200\005" +
    "\176\010\202\011\177\012\201\013\175\015\205\016\203" +
    "\020\uff94\023\uff94\024\uff94\026\uff94\027\uff94\030\uff94\001" +
    "\002\000\044\004\uff76\005\uff76\006\uff76\007\uff76\010\uff76" +
    "\011\uff76\012\uff76\013\uff76\015\uff76\016\uff76\020\uff76\022" +
    "\uff76\023\uff76\024\uff76\026\uff76\027\uff76\030\uff76\001\002" +
    "\000\016\020\uff97\023\uff97\024\uff97\026\uff97\027\uff97\030" +
    "\uff97\001\002\000\004\021\uffe0\001\002\000\012\020\uffcf" +
    "\023\uffcf\024\uffcf\026\uffcf\001\002\000\044\004\uff77\005" +
    "\uff77\006\uff77\007\uff77\010\uff77\011\uff77\012\uff77\013\uff77" +
    "\015\uff77\016\uff77\020\uff77\022\uff77\023\uff77\024\uff77\026" +
    "\uff77\027\uff77\030\uff77\001\002\000\046\004\uff7d\005\uff7d" +
    "\006\uff7d\007\uff7d\010\uff7d\011\uff7d\012\uff7d\013\uff7d\015" +
    "\uff7d\016\uff7d\020\uff7d\021\163\022\uff7d\023\uff7d\024\uff7d" +
    "\026\uff7d\027\uff7d\030\uff7d\001\002\000\016\020\uff99\023" +
    "\uff99\024\uff99\026\uff99\027\161\030\uff99\001\002\000\044" +
    "\004\uff75\005\uff75\006\uff75\007\uff75\010\uff75\011\uff75\012" +
    "\uff75\013\uff75\015\uff75\016\uff75\020\uff75\022\uff75\023\uff75" +
    "\024\uff75\026\uff75\027\uff75\030\uff75\001\002\000\014\020" +
    "\uff9b\023\uff9b\024\uff9b\026\uff9b\030\155\001\002\000\044" +
    "\004\uff7f\005\uff7f\006\uff7f\007\uff7f\010\uff7f\011\uff7f\012" +
    "\uff7f\013\uff7f\015\uff7f\016\uff7f\020\uff7f\022\uff7f\023\uff7f" +
    "\024\uff7f\026\uff7f\027\uff7f\030\uff7f\001\002\000\044\004" +
    "\uff7c\005\uff7c\006\uff7c\007\uff7c\010\uff7c\011\uff7c\012\uff7c" +
    "\013\uff7c\015\uff7c\016\uff7c\020\uff7c\022\uff7c\023\uff7c\024" +
    "\uff7c\026\uff7c\027\uff7c\030\uff7c\001\002\000\004\020\153" +
    "\001\002\000\004\021\uffe4\001\002\000\012\020\uffce\023" +
    "\uffce\024\uffce\026\uffce\001\002\000\004\021\uffe2\001\002" +
    "\000\044\004\uff88\005\uff88\006\uff88\007\uff88\010\uff88\011" +
    "\uff88\012\uff88\013\uff88\015\uff88\016\uff88\020\uff88\022\uff88" +
    "\023\uff88\024\uff88\026\uff88\027\uff88\030\uff88\001\002\000" +
    "\044\004\uff7b\005\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b" +
    "\012\uff7b\013\uff7b\015\uff7b\016\uff7b\020\uff7b\022\uff7b\023" +
    "\uff7b\024\uff7b\026\uff7b\027\uff7b\030\uff7b\001\002\000\004" +
    "\021\uffe6\001\002\000\004\020\uffbf\001\002\000\012\020" +
    "\uffd0\023\uffd0\024\uffd0\026\uffd0\001\002\000\004\021\143" +
    "\001\002\000\004\020\144\001\002\000\012\020\uffe5\023" +
    "\uffe5\024\uffe5\026\uffe5\001\002\000\004\021\146\001\002" +
    "\000\004\020\147\001\002\000\012\020\uffe1\023\uffe1\024" +
    "\uffe1\026\uffe1\001\002\000\004\021\151\001\002\000\004" +
    "\020\152\001\002\000\012\020\uffe3\023\uffe3\024\uffe3\026" +
    "\uffe3\001\002\000\004\024\uffc0\001\002\000\026\005\107" +
    "\014\112\021\113\061\130\062\136\063\122\064\110\065" +
    "\026\066\125\067\116\001\002\000\026\005\uff93\014\uff93" +
    "\021\uff93\061\uff93\062\uff93\063\uff93\064\uff93\065\uff93\066" +
    "\uff93\067\uff93\001\002\000\044\004\uff7d\005\uff7d\006\uff7d" +
    "\007\uff7d\010\uff7d\011\uff7d\012\uff7d\013\uff7d\015\uff7d\016" +
    "\uff7d\020\uff7d\022\uff7d\023\uff7d\024\uff7d\026\uff7d\027\uff7d" +
    "\030\uff7d\001\002\000\016\020\uff9a\023\uff9a\024\uff9a\026" +
    "\uff9a\027\161\030\uff9a\001\002\000\026\005\107\014\112" +
    "\021\113\061\130\062\136\063\122\064\110\065\026\066" +
    "\125\067\116\001\002\000\026\005\uff92\014\uff92\021\uff92" +
    "\061\uff92\062\uff92\063\uff92\064\uff92\065\uff92\066\uff92\067" +
    "\uff92\001\002\000\016\020\uff98\023\uff98\024\uff98\026\uff98" +
    "\027\uff98\030\uff98\001\002\000\040\005\107\014\112\020" +
    "\164\021\113\053\134\054\120\055\137\056\132\061\130" +
    "\062\136\063\122\064\110\065\026\066\125\067\116\001" +
    "\002\000\012\020\uffc3\023\uffc3\024\uffc3\026\uffc3\001\002" +
    "\000\004\020\171\001\002\000\006\020\uffc1\023\167\001" +
    "\002\000\036\005\107\014\112\021\113\053\134\054\120" +
    "\055\137\056\132\061\130\062\136\063\122\064\110\065" +
    "\026\066\125\067\116\001\002\000\004\020\uffc2\001\002" +
    "\000\012\020\uffc4\023\uffc4\024\uffc4\026\uffc4\001\002\000" +
    "\004\021\173\001\002\000\004\020\174\001\002\000\012" +
    "\020\uffdf\023\uffdf\024\uffdf\026\uffdf\001\002\000\024\005" +
    "\uff8e\021\uff8e\061\uff8e\062\uff8e\063\uff8e\064\uff8e\065\uff8e" +
    "\066\uff8e\067\uff8e\001\002\000\024\005\uff84\021\uff84\061" +
    "\uff84\062\uff84\063\uff84\064\uff84\065\uff84\066\uff84\067\uff84" +
    "\001\002\000\024\005\uff90\021\uff90\061\uff90\062\uff90\063" +
    "\uff90\064\uff90\065\uff90\066\uff90\067\uff90\001\002\000\024" +
    "\005\uff85\021\uff85\061\uff85\062\uff85\063\uff85\064\uff85\065" +
    "\uff85\066\uff85\067\uff85\001\002\000\024\005\uff8f\021\uff8f" +
    "\061\uff8f\062\uff8f\063\uff8f\064\uff8f\065\uff8f\066\uff8f\067" +
    "\uff8f\001\002\000\024\005\uff91\021\uff91\061\uff91\062\uff91" +
    "\063\uff91\064\uff91\065\uff91\066\uff91\067\uff91\001\002\000" +
    "\024\005\uff8d\021\uff8d\061\uff8d\062\uff8d\063\uff8d\064\uff8d" +
    "\065\uff8d\066\uff8d\067\uff8d\001\002\000\024\005\107\021" +
    "\113\061\130\062\136\063\122\064\110\065\026\066\125" +
    "\067\116\001\002\000\024\005\uff8c\021\uff8c\061\uff8c\062" +
    "\uff8c\063\uff8c\064\uff8c\065\uff8c\066\uff8c\067\uff8c\001\002" +
    "\000\024\005\107\021\113\061\130\062\136\063\122\064" +
    "\110\065\026\066\125\067\116\001\002\000\022\004\200" +
    "\005\176\020\uff96\023\uff96\024\uff96\026\uff96\027\uff96\030" +
    "\uff96\001\002\000\044\004\uff8b\005\uff8b\006\213\007\212" +
    "\010\uff8b\011\uff8b\012\uff8b\013\uff8b\015\uff8b\016\uff8b\020" +
    "\uff8b\022\211\023\uff8b\024\uff8b\026\uff8b\027\uff8b\030\uff8b" +
    "\001\002\000\024\005\uff81\021\uff81\061\uff81\062\uff81\063" +
    "\uff81\064\uff81\065\uff81\066\uff81\067\uff81\001\002\000\024" +
    "\005\uff83\021\uff83\061\uff83\062\uff83\063\uff83\064\uff83\065" +
    "\uff83\066\uff83\067\uff83\001\002\000\024\005\uff82\021\uff82" +
    "\061\uff82\062\uff82\063\uff82\064\uff82\065\uff82\066\uff82\067" +
    "\uff82\001\002\000\024\005\107\021\113\061\130\062\136" +
    "\063\122\064\110\065\026\066\125\067\116\001\002\000" +
    "\044\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89\011\uff89" +
    "\012\uff89\013\uff89\015\uff89\016\uff89\020\uff89\022\uff89\023" +
    "\uff89\024\uff89\026\uff89\027\uff89\030\uff89\001\002\000\004" +
    "\020\217\001\002\000\044\004\uff87\005\uff87\006\uff87\007" +
    "\uff87\010\uff87\011\uff87\012\uff87\013\uff87\015\uff87\016\uff87" +
    "\020\uff87\022\uff87\023\uff87\024\uff87\026\uff87\027\uff87\030" +
    "\uff87\001\002\000\016\020\uff95\023\uff95\024\uff95\026\uff95" +
    "\027\uff95\030\uff95\001\002\000\044\004\uff7a\005\uff7a\006" +
    "\uff7a\007\uff7a\010\uff7a\011\uff7a\012\uff7a\013\uff7a\015\uff7a" +
    "\016\uff7a\020\uff7a\022\uff7a\023\uff7a\024\uff7a\026\uff7a\027" +
    "\uff7a\030\uff7a\001\002\000\044\004\uff79\005\uff79\006\uff79" +
    "\007\uff79\010\uff79\011\uff79\012\uff79\013\uff79\015\uff79\016" +
    "\uff79\020\uff79\022\uff79\023\uff79\024\uff79\026\uff79\027\uff79" +
    "\030\uff79\001\002\000\006\023\uffd4\024\uffd4\001\002\000" +
    "\010\017\225\023\uffd3\024\uffd3\001\002\000\036\005\107" +
    "\014\112\021\113\053\134\054\120\055\137\056\132\061" +
    "\130\062\136\063\122\064\110\065\026\066\125\067\116" +
    "\001\002\000\006\023\uffd2\024\uffd2\001\002\000\044\003" +
    "\uffef\031\uffef\032\uffef\034\uffef\036\uffef\037\uffef\040\uffef" +
    "\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051" +
    "\uffef\052\uffef\057\uffef\065\uffef\001\002\000\006\003\037" +
    "\041\036\001\002\000\044\003\uffdc\031\uffdc\032\uffdc\034" +
    "\uffdc\036\uffdc\037\uffdc\040\uffdc\043\uffdc\044\uffdc\045\uffdc" +
    "\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\057\uffdc\065" +
    "\uffdc\001\002\000\006\003\uffa4\041\uffa4\001\002\000\030" +
    "\005\107\014\112\020\234\021\113\061\130\062\136\063" +
    "\122\064\110\065\026\066\125\067\116\001\002\000\004" +
    "\003\240\001\002\000\004\020\236\001\002\000\006\003" +
    "\037\041\036\001\002\000\044\003\uffa7\031\uffa7\032\uffa7" +
    "\034\uffa7\036\uffa7\037\uffa7\040\uffa7\043\uffa7\044\uffa7\045" +
    "\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\057\uffa7" +
    "\065\uffa7\001\002\000\006\003\uffa6\041\uffa6\001\002\000" +
    "\006\003\037\041\036\001\002\000\044\003\uffa5\031\uffa5" +
    "\032\uffa5\034\uffa5\036\uffa5\037\uffa5\040\uffa5\043\uffa5\044" +
    "\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5" +
    "\057\uffa5\065\uffa5\001\002\000\006\003\037\041\036\001" +
    "\002\000\044\003\uffa3\031\uffa3\032\uffa3\034\uffa3\036\uffa3" +
    "\037\uffa3\040\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047" +
    "\uffa3\050\uffa3\051\uffa3\052\uffa3\057\uffa3\065\uffa3\001\002" +
    "\000\004\065\026\001\002\000\006\023\uffd5\024\uffd5\001" +
    "\002\000\004\026\250\001\002\000\006\003\037\041\036" +
    "\001\002\000\044\003\uffdd\031\uffdd\032\uffdd\034\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd" +
    "\047\uffdd\050\uffdd\051\uffdd\052\uffdd\057\uffdd\065\uffdd\001" +
    "\002\000\006\003\uff9d\041\uff9d\001\002\000\026\005\107" +
    "\014\112\021\113\061\130\062\136\063\122\064\110\065" +
    "\026\066\125\067\116\001\002\000\004\020\255\001\002" +
    "\000\006\003\037\041\036\001\002\000\044\003\uff9e\031" +
    "\uff9e\032\uff9e\034\uff9e\036\uff9e\037\uff9e\040\uff9e\043\uff9e" +
    "\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052" +
    "\uff9e\057\uff9e\065\uff9e\001\002\000\006\003\037\041\036" +
    "\001\002\000\044\003\uff9c\031\uff9c\032\uff9c\034\uff9c\036" +
    "\uff9c\037\uff9c\040\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c" +
    "\047\uff9c\050\uff9c\051\uff9c\052\uff9c\057\uff9c\065\uff9c\001" +
    "\002\000\036\005\107\014\112\021\113\053\134\054\120" +
    "\055\137\056\132\061\130\062\136\063\122\064\110\065" +
    "\026\066\125\067\116\001\002\000\006\020\uff74\024\uff74" +
    "\001\002\000\004\004\267\001\002\000\006\020\uff73\024" +
    "\uff73\001\002\000\004\005\266\001\002\000\006\020\uff71" +
    "\024\uff71\001\002\000\006\020\uff72\024\uff72\001\002\000" +
    "\004\024\uffcd\001\002\000\042\003\063\031\052\032\060" +
    "\034\073\037\070\040\047\043\064\044\062\045\102\046" +
    "\025\047\016\050\022\051\017\052\024\057\045\065\026" +
    "\001\002\000\004\024\273\001\002\000\004\024\uffe7\001" +
    "\002\000\044\003\uffeb\031\uffeb\032\uffeb\034\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047" +
    "\uffeb\050\uffeb\051\uffeb\052\uffeb\057\uffeb\065\uffeb\001\002" +
    "\000\044\003\ufff1\031\ufff1\032\ufff1\034\ufff1\036\ufff1\037" +
    "\ufff1\040\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1" +
    "\050\ufff1\051\ufff1\052\ufff1\057\ufff1\065\ufff1\001\002\000" +
    "\006\003\uffa0\041\uffa0\001\002\000\026\005\107\014\112" +
    "\021\113\061\130\062\136\063\122\064\110\065\026\066" +
    "\125\067\116\001\002\000\004\020\301\001\002\000\006" +
    "\003\037\041\036\001\002\000\046\003\uffa2\031\uffa2\032" +
    "\uffa2\033\303\034\uffa2\036\uffa2\037\uffa2\040\uffa2\043\uffa2" +
    "\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052" +
    "\uffa2\057\uffa2\065\uffa2\001\002\000\006\003\037\041\036" +
    "\001\002\000\044\003\uffa1\031\uffa1\032\uffa1\034\uffa1\036" +
    "\uffa1\037\uffa1\040\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1" +
    "\047\uffa1\050\uffa1\051\uffa1\052\uffa1\057\uffa1\065\uffa1\001" +
    "\002\000\006\003\037\041\036\001\002\000\044\003\uff9f" +
    "\031\uff9f\032\uff9f\034\uff9f\036\uff9f\037\uff9f\040\uff9f\043" +
    "\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f" +
    "\052\uff9f\057\uff9f\065\uff9f\001\002\000\004\024\uffb3\001" +
    "\002\000\044\003\ufff0\031\ufff0\032\ufff0\034\ufff0\036\ufff0" +
    "\037\ufff0\040\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047" +
    "\ufff0\050\ufff0\051\ufff0\052\ufff0\057\ufff0\065\ufff0\001\002" +
    "\000\044\003\uffee\031\uffee\032\uffee\034\uffee\036\uffee\037" +
    "\uffee\040\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee" +
    "\050\uffee\051\uffee\052\uffee\057\uffee\065\uffee\001\002\000" +
    "\006\003\uffaa\041\uffaa\001\002\000\014\046\025\047\016" +
    "\050\022\051\017\052\024\001\002\000\006\023\245\024" +
    "\320\001\002\000\004\020\316\001\002\000\006\003\037" +
    "\041\036\001\002\000\044\003\uffab\031\uffab\032\uffab\034" +
    "\uffab\036\uffab\037\uffab\040\uffab\043\uffab\044\uffab\045\uffab" +
    "\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\057\uffab\065" +
    "\uffab\001\002\000\026\005\107\014\112\021\113\061\130" +
    "\062\136\063\122\064\110\065\026\066\125\067\116\001" +
    "\002\000\004\024\322\001\002\000\004\065\026\001\002" +
    "\000\004\020\uffa8\001\002\000\006\004\263\005\265\001" +
    "\002\000\006\003\037\041\036\001\002\000\044\003\uffa9" +
    "\031\uffa9\032\uffa9\034\uffa9\036\uffa9\037\uffa9\040\uffa9\043" +
    "\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9" +
    "\052\uffa9\057\uffa9\065\uffa9\001\002\000\052\003\ufff5\025" +
    "\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\036\ufff5\037\ufff5" +
    "\040\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047" +
    "\ufff5\050\ufff5\051\ufff5\052\ufff5\057\ufff5\065\ufff5\001\002" +
    "\000\006\003\uffdb\041\uffdb\001\002\000\006\003\037\041" +
    "\036\001\002\000\044\003\uffda\031\uffda\032\uffda\034\uffda" +
    "\036\uffda\037\uffda\040\uffda\043\uffda\044\uffda\045\uffda\046" +
    "\uffda\047\uffda\050\uffda\051\uffda\052\uffda\057\uffda\065\uffda" +
    "\001\002\000\006\003\uffd9\041\uffd9\001\002\000\006\003" +
    "\037\041\036\001\002\000\044\003\uffd8\031\uffd8\032\uffd8" +
    "\034\uffd8\036\uffd8\037\uffd8\040\uffd8\043\uffd8\044\uffd8\045" +
    "\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\057\uffd8" +
    "\065\uffd8\001\002\000\004\036\ufff4\001\002\000\004\036" +
    "\341\001\002\000\052\003\ufff7\025\ufff7\031\ufff7\032\ufff7" +
    "\033\ufff7\034\ufff7\036\ufff7\037\ufff7\040\ufff7\042\ufff7\043" +
    "\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7" +
    "\052\ufff7\057\ufff7\065\ufff7\001\002\000\052\003\ufff8\025" +
    "\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\036\ufff8\037\ufff8" +
    "\040\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047" +
    "\ufff8\050\ufff8\051\ufff8\052\ufff8\057\ufff8\065\ufff8\001\002" +
    "\000\006\020\uffb7\023\uffb7\001\002\000\006\020\uffb4\023" +
    "\uffb4\001\002\000\006\003\037\041\036\001\002\000\010" +
    "\003\uffb8\025\uffb8\042\uffb8\001\002\000\004\021\347\001" +
    "\002\000\020\020\uffb5\023\uffb5\046\025\047\016\050\022" +
    "\051\017\052\024\001\002\000\006\020\351\023\034\001" +
    "\002\000\006\003\037\041\036\001\002\000\010\003\uffba" +
    "\025\uffba\042\uffba\001\002\000\004\002\uffff\001\002\000" +
    "\004\036\355\001\002\000\004\002\000\001\002\000\006" +
    "\003\uffbd\025\uffbd\001\002\000\006\003\037\041\036\001" +
    "\002\000\004\036\ufff9\001\002\000\004\036\ufffb\001\002" +
    "\000\006\003\011\025\010\001\002\000\004\036\364\001" +
    "\002\000\004\002\ufffd\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\363\000\004\010\003\001\001\000\002\001\001\000" +
    "\004\072\361\001\001\000\012\002\013\011\006\012\011" +
    "\057\012\001\001\000\002\001\001\000\004\013\360\001" +
    "\001\000\004\073\356\001\001\000\006\011\355\012\011" +
    "\001\001\000\004\002\353\001\001\000\002\001\001\000" +
    "\004\005\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\065\345\001\001\000\004\105\343\001\001\000" +
    "\002\001\001\000\004\065\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\030\054\032\055\031\001\001\000\004\065\342" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\030\055\341\001\001\000\004\013\037\001\001\000\062" +
    "\003\336\004\043\005\076\006\053\014\060\015\041\020" +
    "\074\025\102\026\045\027\056\030\042\031\055\032\064" +
    "\033\100\035\052\036\077\037\070\040\073\047\054\052" +
    "\065\053\050\056\075\063\071\065\066\001\001\000\004" +
    "\074\040\001\001\000\002\001\001\000\062\003\047\004" +
    "\043\005\076\006\053\014\060\015\041\020\074\025\102" +
    "\026\045\027\056\030\042\031\055\032\064\033\100\035" +
    "\052\036\077\037\070\040\073\047\054\052\065\053\050" +
    "\056\075\063\071\065\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\335\004\043\005\076\006\053" +
    "\014\060\015\041\020\074\025\102\026\045\027\056\030" +
    "\042\031\055\032\064\033\100\035\052\036\077\037\070" +
    "\040\073\047\054\052\065\053\050\056\075\063\071\065" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\007\306" +
    "\016\116\023\125\024\123\041\140\042\114\043\105\044" +
    "\134\053\120\060\132\065\122\066\110\067\126\070\113" +
    "\071\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\075\270\076\271\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\261\022\263\001\001" +
    "\000\002\001\001\000\040\007\246\016\116\023\125\024" +
    "\123\041\140\042\114\043\105\044\134\053\120\060\132" +
    "\065\122\066\110\067\126\070\113\071\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\064\222\065\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\007\137\016\116\023\125\024" +
    "\123\041\140\042\114\043\105\044\134\046\130\053\120" +
    "\060\132\065\122\066\110\067\126\070\113\071\104\001" +
    "\001\000\002\001\001\000\004\062\213\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\016" +
    "\217\042\114\043\105\044\134\065\155\066\110\067\126" +
    "\070\113\071\104\001\001\000\032\016\116\023\125\024" +
    "\123\041\215\042\114\043\105\044\134\065\155\066\110" +
    "\067\126\070\113\071\104\001\001\000\002\001\001\000" +
    "\006\017\205\061\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\102\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\157\001\001" +
    "\000\002\001\001\000\004\051\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\100\147" +
    "\001\001\000\002\001\001\000\004\101\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\077\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\016\116" +
    "\024\156\042\114\043\105\044\134\065\155\066\110\067" +
    "\126\070\113\071\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\157\001\001\000\024\016\161\042" +
    "\114\043\105\044\134\065\155\066\110\067\126\070\113" +
    "\071\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\007\165\016\116\023\125\024\123\041\140\042\114" +
    "\043\105\044\134\045\164\053\120\060\132\065\122\066" +
    "\110\067\126\070\113\071\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\007\165\016" +
    "\116\023\125\024\123\041\140\042\114\043\105\044\134" +
    "\045\167\053\120\060\132\065\122\066\110\067\126\070" +
    "\113\071\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\043\207\044\134\065\155\066\110\067\126" +
    "\070\113\071\104\001\001\000\002\001\001\000\022\042" +
    "\206\043\105\044\134\065\155\066\110\067\126\070\113" +
    "\071\104\001\001\000\004\061\203\001\001\000\004\062" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\044\214\065\155\066\110\067\126\070" +
    "\113\071\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\007\225\016\116\023\125\024\123\041\140\042\114\043" +
    "\105\044\134\053\120\060\132\065\122\066\110\067\126" +
    "\070\113\071\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\230\001\001\000\002\001\001\000\004" +
    "\110\242\001\001\000\032\016\116\023\125\024\123\041" +
    "\234\042\114\043\105\044\134\065\155\066\110\067\126" +
    "\070\113\071\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\236\001\001\000\002\001\001\000\004" +
    "\107\240\001\001\000\004\013\241\001\001\000\002\001" +
    "\001\000\004\013\243\001\001\000\002\001\001\000\006" +
    "\064\245\065\223\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\250\001\001\000\002\001\001\000\004" +
    "\112\256\001\001\000\032\016\116\023\125\024\123\041" +
    "\253\042\114\043\105\044\134\065\155\066\110\067\126" +
    "\070\113\071\104\001\001\000\002\001\001\000\004\013" +
    "\255\001\001\000\002\001\001\000\004\013\257\001\001" +
    "\000\002\001\001\000\040\007\267\016\116\023\125\024" +
    "\123\041\140\042\114\043\105\044\134\053\120\060\132" +
    "\065\122\066\110\067\126\070\113\071\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\004\273\005\076\006\053\014\060\015\041" +
    "\020\074\025\102\026\045\027\056\030\042\031\055\032" +
    "\064\033\100\035\052\036\077\037\070\040\073\047\054" +
    "\052\065\053\050\056\075\063\071\065\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\111\304\001\001\000\032\016\116\023" +
    "\125\024\123\041\277\042\114\043\105\044\134\065\155" +
    "\066\110\067\126\070\113\071\104\001\001\000\002\001" +
    "\001\000\004\013\301\001\001\000\002\001\001\000\004" +
    "\013\303\001\001\000\002\001\001\000\004\013\305\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\106\324\001\001\000\010\005" +
    "\076\034\314\063\313\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\316\001\001\000\002\001\001\000" +
    "\032\016\116\023\125\024\123\041\320\042\114\043\105" +
    "\044\134\065\155\066\110\067\126\070\113\071\104\001" +
    "\001\000\002\001\001\000\006\020\322\065\323\001\001" +
    "\000\002\001\001\000\006\021\261\022\263\001\001\000" +
    "\004\013\325\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\103\330\001\001\000\004\013\331\001\001\000" +
    "\002\001\001\000\004\104\333\001\001\000\004\013\334" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\344\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\030\054\347\055\031" +
    "\001\001\000\002\001\001\000\004\013\351\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\357\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\362\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Node root = null;
    public int errors = 0;
    public int fatal = 0;
    public JavaSymbol currentSymbol;

    public void report_error(String message, Object info){
        StringBuilder m = new StringBuilder("");
        if(info instanceof java_cup.runtime.Symbol){
            m.append("Error: ");
            m.append(info);
            m.append(": " + message);
        } else {
            if (info instanceof String) {
                errors++;
                m.append("    "+ errors + "==> " + info + " "+ message+"\n");
            }
        }
        Editor.console.setText(Editor.console.getText() + m.toString() + "\n");
    }

    public void report_fatal_error(String message, Object info){
        fatal++;
        report_error(message, info);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= BEGIN Functions Main END 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node mn = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                    RESULT = new Node("PROG", f, mn);
                                    parser.root = RESULT;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= BEGIN Main END 
            {
              Node RESULT =null;
		int mnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node mn = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                    RESULT = new Node("PROG", mn);
                                    parser.root = RESULT;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Node RESULT =null;
 parser.report_error("syntax. Missing token 'begin'.","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= error NT$0 Main END 
            {
              Node RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Functions ::= FunctionList 
            {
              Node RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("FUNCTIONS",fl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Functions",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Main ::= MAINBEGIN Statements 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("MAIN",st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Node RESULT =null;
 parser.report_error("token 'mainbegin'.","MISSING"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Main ::= error NT$1 Statements 
            {
              Node RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Statements ::= DO BodyList END 
            {
              Node RESULT =null;
		int bdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node bdl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = bdl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Statements ::= DO END 
            {
              Node RESULT =null;
		 RESULT = new Node(""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Node RESULT =null;
 parser.report_error("block declaration syntax. Unmatched 'do' 'end' tokens.","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statements ::= error NT$2 BodyList END 
            {
              Node RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BodyList ::= BodyPart BodyList 
            {
              Node RESULT =null;
		int bpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node bp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bdl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bdl.add(bp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BodyList ::= BodyPart 
            {
              Node RESULT =null;
		int bpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("body", bp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BodyPart ::= Block 
            {
              Node RESULT =null;
		int bqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bq = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bq; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BodyPart ::= Instruccion PUNTOCOMA 
            {
              Node RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node ins = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ins; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BodyPart ::= Asignacion PUNTOCOMA 
            {
              Node RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node asig = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = asig; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BodyPart ::= ReturnExpr PUNTOCOMA 
            {
              Node RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node ret = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ret; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BodyPart ::= Break PUNTOCOMA 
            {
              Node RESULT =null;
		int bkleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bkright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node bk = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = bk; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BodyPart ::= CaseExpr 
            {
              Node RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node cs = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cs; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$3 ::= 
            {
              Node RESULT =null;
 parser.report_error("start of expression.","ILLEGAL"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BodyPart ::= error NT$3 BodyPart 
            {
              Node RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BodyPart",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Instruccion ::= VarDeclarationList 
            {
              Node RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node vdl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    String type = vdl.getData().getType();
                                    for (Node decl : vdl.getChildren()) {
                                        decl.getChildren().get(0).getData().setType(type);
                                    }
                                    RESULT = vdl;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruccion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Instruccion ::= Llamado 
            {
              Node RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node l = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruccion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$4 ::= 
            {
              Node RESULT =null;
 parser.report_error("variable initialization, declaration or function call","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Instruccion ::= error NT$4 PUNTOCOMA 
            {
              Node RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instruccion",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$5 ::= 
            {
              Node RESULT =null;
 parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Lectura ::= READINT NT$5 PARIZQ PARDER 
            {
              Node RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                    RESULT = new Node(new Data(parser.currentSymbol),"READINT");
                                    RESULT.getData().setType("int");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lectura",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$6 ::= 
            {
              Node RESULT =null;
 parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Lectura ::= READDOUBLE NT$6 PARIZQ PARDER 
            {
              Node RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                    RESULT = new Node(new Data(parser.currentSymbol),"READDOUBLE");
                                    RESULT.getData().setType("double");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lectura",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$7 ::= 
            {
              Node RESULT =null;
 parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Lectura ::= READSTRING NT$7 PARIZQ PARDER 
            {
              Node RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                    RESULT = new Node(new Data(parser.currentSymbol),"READSTRING");
                                    RESULT.getData().setType("string");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lectura",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$8 ::= 
            {
              Node RESULT =null;
 parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Lectura ::= READCHAR NT$8 PARIZQ PARDER 
            {
              Node RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                    RESULT = new Node(new Data(parser.currentSymbol),"READCHAR");
                                    RESULT.getData().setType("char");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lectura",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Break ::= BREAK 
            {
              Node RESULT =null;
		
                                    parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek();
                                    RESULT = new Node(new Data(parser.currentSymbol),"BREAK");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Break",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CaseExpr ::= Case Value DOSPUNTOS Statements 
            {
              Node RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node cs = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cs.add(new Node("case_arg",val),st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CaseExpr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CaseExpr ::= Other DOSPUNTOS Statements 
            {
              Node RESULT =null;
		int otleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int otright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node ot = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ot.add(st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CaseExpr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$9 ::= 
            {
              Node RESULT =null;
 parser.report_error("'CASE' syntax.","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CaseExpr ::= CASE error NT$9 Statements 
            {
              Node RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CaseExpr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$10 ::= 
            {
              Node RESULT =null;
 parser.report_error("'OTHER' syntax.","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CaseExpr ::= OTHER error NT$10 Statements 
            {
              Node RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CaseExpr",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Case ::= CASE 
            {
              Node RESULT =null;
		
                                    parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek();
                                    RESULT = new Node(new Data(parser.currentSymbol),"CASE");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Case",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Other ::= OTHER 
            {
              Node RESULT =null;
		
                                    parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek();
                                    RESULT = new Node(new Data(parser.currentSymbol),"OTHER");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Other",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VarDeclarationList ::= VarDeclarationList COMA VarDeclarationPart 
            {
              Node RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node vdl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node vp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vdl.add(vp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclarationList",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VarDeclarationList ::= Type VarDeclarationPart 
            {
              Node RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node tp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vdpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node vdp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT = new Node("declarations", vdp);
                                    RESULT.getData().setType(tp.label);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclarationList",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VarDeclarationPart ::= Identifier 
            {
              Node RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node iden = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("declare", iden); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclarationPart",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VarDeclarationPart ::= Identifier ASIGNACION Value 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("init",id,val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclarationPart",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Identifier ::= IDENTIFICADOR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(parser.currentSymbol.getLexeme(), "IDENTIFIER", null, parser.currentSymbol.getLine(), parser.currentSymbol.getColumn());
                                    dat.setType("identifier");
                                    RESULT = new Node(dat, id);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifier",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Value ::= Expression 
            {
              Node RESULT =null;
		int ebleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node eb = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = eb; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Value ::= FunctionCall 
            {
              Node RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fc = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Value ::= Lectura 
            {
              Node RESULT =null;
		int lecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lec = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lec; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Value",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Asignacion ::= Identifier ASIGNACION Value 
            {
              Node RESULT =null;
		int idenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node iden = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("assign",iden,val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Asignacion ::= ExprIncDec 
            {
              Node RESULT =null;
		int updateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int updateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node update = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = update; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Type ::= INT 
            {
              Node RESULT =null;
		 RESULT = new Node("int"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Type ::= DOUBLE 
            {
              Node RESULT =null;
		 RESULT = new Node("double"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Type ::= CHAR 
            {
              Node RESULT =null;
		 RESULT = new Node("char"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Type ::= BOOLEAN 
            {
              Node RESULT =null;
		 RESULT = new Node("boolean"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Type ::= STRING 
            {
              Node RESULT =null;
		 RESULT = new Node("string"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Llamado ::= Print 
            {
              Node RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node pr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Llamado",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Llamado ::= FunctionCall 
            {
              Node RESULT =null;
		int lmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Llamado",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FunctionCall ::= Identifier PARIZQ Contenido PARDER 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node cont = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("function_call",id,cont); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionCall",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FunctionCall ::= Identifier PARIZQ PARDER 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Node("function_call", id, new Node("parameters",new Node(""))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionCall",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Contenido ::= Value COMA Contenido 
            {
              Node RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node cont = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cont.add(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Contenido",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Contenido ::= Value 
            {
              Node RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("parameters",val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Contenido",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Print ::= PRINT PARIZQ PrintParam PARDER 
            {
              Node RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node pp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("PRINT", pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Print",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PrintParam ::= Value 
            {
              Node RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintParam",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PrintParam ::= 
            {
              Node RESULT =null;
		 RESULT = new Node(""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrintParam",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FunctionList ::= FunctionPart FunctionList 
            {
              Node RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node fp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fl.add(fp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FunctionList ::= FunctionPart 
            {
              Node RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("body",fp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FunctionPart ::= FUNCTION VOID Identifier PARIZQ Parametros PARDER Statements 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node param = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    StringBuilder domain = new StringBuilder("");
                                    if (param.getChildren().size()>0) {
                                        for (Node iden : param.getChildren()){
                                            domain.append(iden.getData().getType().concat("x"));
                                        }
                                        domain.deleteCharAt(domain.length()-1);
                                    }

                                    FunctionType function = new FunctionType(id,domain.toString(),"void");
                                    Data data = id.getData();
                                    data.setValue(function);
                                    RESULT = new Node(data, id.label, param, st);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionPart",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FunctionPart ::= FUNCTION Type Identifier PARIZQ Parametros PARDER Statements 
            {
              Node RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Node tp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node param = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    StringBuilder domain = new StringBuilder("");
                                    if (param.getChildren().size()>0) {
                                        for (Node iden : param.getChildren()){
                                            domain.append(iden.getData().getType().concat("x"));
                                        }
                                        domain.deleteCharAt(domain.length()-1);
                                    }

                                    FunctionType function = new FunctionType(id, domain.toString(), tp.label);
                                    Data data = id.getData();
                                    data.setValue(function);
                                    data.setType("function");
                                    RESULT = new Node(data, id.label, param, st);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionPart",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$11 ::= 
            {
              Node RESULT =null;

                                            parser.report_error("function declaration. Usage example: function <type> <id> () do ... end","WRONG");
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FunctionPart ::= FUNCTION error NT$11 Statements 
            {
              Node RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunctionPart",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Parametros ::= Parametros COMA Param 
            {
              Node RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node params = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node param = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = params.add(param); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Parametros ::= Param 
            {
              Node RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node param = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("parameters",param); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Parametros ::= 
            {
              Node RESULT =null;
		 RESULT = new Node("parameters",new Node("")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Param ::= Type Identifier 
            {
              Node RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node tp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT = id;
                                    RESULT.getData().setType(tp.label);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Param",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ReturnExpr ::= Return Value 
            {
              Node RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node ret = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ret.add(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnExpr",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Return ::= RETURN 
            {
              Node RESULT =null;
		
                                    parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek();
                                    RESULT = new Node(new Data(parser.currentSymbol), "RETURN");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Return",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Block ::= Loops 
            {
              Node RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Block ::= Conditional 
            {
              Node RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cond; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Loops ::= ForStmt 
            {
              Node RESULT =null;
		int flpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node flp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = flp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Loops",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Loops ::= WhileStmt 
            {
              Node RESULT =null;
		int wlpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wlpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node wlp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = wlp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Loops",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Conditional ::= IfStmt 
            {
              Node RESULT =null;
		int icleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int icright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ic = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ic; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Conditional",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Conditional ::= SwitchStmt 
            {
              Node RESULT =null;
		int swcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int swcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node swc = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = swc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Conditional",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ForStmt ::= FOR PARIZQ ForExpr PARDER Statements 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT = new Node("FOR", expr, st);
                                    RESULT.getData().setType("for_statement");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$12 ::= 
            {
              Node RESULT =null;
 parser.report_error("FOR statement declaration","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ForStmt ::= FOR error NT$12 Statements 
            {
              Node RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ForExpr ::= VarDeclarationList PUNTOCOMA Expression PUNTOCOMA ExprIncDec 
            {
              Node RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node vdl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int updateleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int updateright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node update = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    String type = vdl.getData().getType();
                                    for (Node decl : vdl.getChildren()) {
                                        decl.getChildren().get(0).getData().setType(type);
                                    }
                                    RESULT = new Node("structure",vdl,expr,update);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForExpr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // WhileStmt ::= WHILE PARIZQ Expression PARDER Statements 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT = new Node("WHILE",new Node("conditions",expr), st);
                                    RESULT.getData().setType("while_statement");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$13 ::= 
            {
              Node RESULT =null;
 parser.report_error("WHILE statement declaration, missing boolean expression.","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // WhileStmt ::= WHILE PARIZQ PARDER error NT$13 Statements 
            {
              Node RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$14 ::= 
            {
              Node RESULT =null;
 parser.report_error("WHILE statement declaration. Usage example:\n\n\twhile (<boolean expression>) do \n\t\t...\n\tend","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // WhileStmt ::= WHILE error NT$14 Statements 
            {
              Node RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // IfStmt ::= IF PARIZQ Expression PARDER Statements 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT = new Node("IF",new Node("conditions",expr), st);
                                    RESULT.getData().setType("if_statement");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // IfStmt ::= IF PARIZQ Expression PARDER Statements ELSE Statements 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int st1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node st1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int st2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int st2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT = new Node("IF",new Node("conditions",expr),st1,new Node("ELSE",st2));
                                    RESULT.getData().setType("if_else_statement");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$15 ::= 
            {
              Node RESULT =null;
 parser.report_error("IF statement declaration. Usage example:\n\n\tif (<boolean expression>) do \n\t\t...\n\tend", "WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // IfStmt ::= IF error NT$15 Statements 
            {
              Node RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStmt",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SwitchStmt ::= SWITCH PARIZQ Expression PARDER Statements 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT = new Node("SWITCH", new Node("switch_arg",expr), st);
                                    RESULT.getData().setType("switch_statement");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchStmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$16 ::= 
            {
              Node RESULT =null;
parser.report_error("SWITCH statement declaration.","WRONG"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$16",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SwitchStmt ::= SWITCH error NT$16 Statements 
            {
              Node RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Node) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SwitchStmt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Expression ::= BooleanExpression 
            {
              Node RESULT =null;
		int belleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int belright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bel = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bel; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // BooleanExpression ::= BooleanExpression OrOperator BooleanFactor 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node or = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bf = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT = or.add(expr,bf);
                                    RESULT.getData().setType("boolean");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanExpression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // BooleanExpression ::= BooleanFactor 
            {
              Node RESULT =null;
		int factleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fact = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fact; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanExpression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // BooleanFactor ::= BooleanFactor AndOperator Comparison 
            {
              Node RESULT =null;
		int bfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node bf = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int andleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int andright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node and = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node comp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT = and.add(bf,comp);
                                    RESULT.getData().setType("boolean");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanFactor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // BooleanFactor ::= Comparison 
            {
              Node RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node comp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = comp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanFactor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Comparison ::= ArithmeticExpr RelationalOper ArithmeticExpr 
            {
              Node RESULT =null;
		int ae1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ae1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node ae1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oprelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oprelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node oprel = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ae2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ae2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ae2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    RESULT = oprel.add(ae1,ae2);
                                    RESULT.getData().setType("boolean");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Comparison",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Comparison ::= NOT Comparison 
            {
              Node RESULT =null;
		int exprcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exprc = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("NOT", exprc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Comparison",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Comparison ::= ArithmeticExpr 
            {
              Node RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ae = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ae; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Comparison",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OrOperator ::= OR 
            {
              Node RESULT =null;
		
                                    parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek();
                                    RESULT = new Node(new Data(parser.currentSymbol),"OR");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OrOperator",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // AndOperator ::= AND 
            {
              Node RESULT =null;
		
                                    parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek();
                                    RESULT = new Node(new Data(parser.currentSymbol),"AND");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AndOperator",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // RelationalOper ::= MAYOR 
            {
              Node RESULT =null;
		
                                    parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek();
                                    RESULT = new Node(new Data(parser.currentSymbol),">");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOper",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // RelationalOper ::= MENOR 
            {
              Node RESULT =null;
		
                                    parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek();
                                    RESULT = new Node(new Data(parser.currentSymbol),"<");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOper",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // RelationalOper ::= MAYORIGUAL 
            {
              Node RESULT =null;
		
                                    parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek();
                                    RESULT = new Node(new Data(parser.currentSymbol),">=");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOper",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // RelationalOper ::= MENORIGUAL 
            {
              Node RESULT =null;
		
                                    parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek();
                                    RESULT = new Node(new Data(parser.currentSymbol),"<=");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOper",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // RelationalOper ::= IGUAL 
            {
              Node RESULT =null;
		
                                    parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek();
                                    RESULT = new Node(new Data(parser.currentSymbol),"==");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOper",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // RelationalOper ::= DIFERENTE 
            {
              Node RESULT =null;
		
                                    parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek();
                                    RESULT = new Node(new Data(parser.currentSymbol),"!=");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalOper",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ArithmeticExpr ::= ArithmeticExpr AddOrSubstract Factor 
            {
              Node RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node ea = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node aos = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = aos.add(ea,fct); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ArithmeticExpr ::= Factor 
            {
              Node RESULT =null;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fct; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArithmeticExpr",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Factor ::= Factor MultiplyOrDivide Term 
            {
              Node RESULT =null;
		int fctleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fctright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node fct = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mdmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mdmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node mdm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int trmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node trm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = mdm.add(fct,trm); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Factor ::= Term 
            {
              Node RESULT =null;
		int trmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int trmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node trm = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = trm; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Term ::= PARIZQ Expression PARDER 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Term ::= Literals 
            {
              Node RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node lit = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lit; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // AddOrSubstract ::= SUMA 
            {
              Node RESULT =null;
		
                                    parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek();
                                    RESULT = new Node(new Data(parser.currentSymbol), "+");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOrSubstract",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // AddOrSubstract ::= MENOS 
            {
              Node RESULT =null;
		
                                    parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek();
                                    RESULT = new Node(new Data(parser.currentSymbol), "-");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AddOrSubstract",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // MultiplyOrDivide ::= MULT 
            {
              Node RESULT =null;
		
                                    parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek();
                                    RESULT = new Node(new Data(parser.currentSymbol), "*");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplyOrDivide",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // MultiplyOrDivide ::= DIV 
            {
              Node RESULT =null;
		
                                    parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek();
                                    RESULT = new Node(new Data(parser.currentSymbol), "/");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplyOrDivide",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // MultiplyOrDivide ::= MOD 
            {
              Node RESULT =null;
		
                                    parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek();
                                    RESULT = new Node(new Data(parser.currentSymbol), "%");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplyOrDivide",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Literals ::= NumLiterals 
            {
              Node RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node nl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = nl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literals",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Literals ::= StringLiterals 
            {
              Node RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literals",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Literals ::= BooleanLiterals 
            {
              Node RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node bl = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = bl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literals",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Literals ::= Identifier 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literals",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NumLiterals ::= NUMERO 
            {
              Node RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(parser.currentSymbol.getLexeme(), "NUMBER", num, parser.currentSymbol.getLine(), parser.currentSymbol.getColumn());
                                    RESULT = new Node(dat, Integer.toString(num));
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NumLiterals",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NumLiterals ::= REAL 
            {
              Node RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double real = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(parser.currentSymbol.getLexeme(), "REAL", real, parser.currentSymbol.getLine(), parser.currentSymbol.getColumn());
                                    RESULT = new Node(dat, Double.toString(real));
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NumLiterals",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NumLiterals ::= MENOS NUMERO 
            {
              Node RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(parser.currentSymbol.getLexeme(), "NUMBER", num*-1, parser.currentSymbol.getLine(), parser.currentSymbol.getColumn());
                                    RESULT = new Node(dat, Integer.toString(num*-1));
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NumLiterals",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NumLiterals ::= MENOS REAL 
            {
              Node RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double real = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(parser.currentSymbol.getLexeme(), "REAL", real*-1, parser.currentSymbol.getLine(), parser.currentSymbol.getColumn());
                                    RESULT = new Node(dat, Double.toString(real*-1));
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NumLiterals",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // StringLiterals ::= CADENA 
            {
              Node RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(parser.currentSymbol.getLexeme(), "STRING", str, parser.currentSymbol.getLine(), parser.currentSymbol.getColumn());
                                    RESULT = new Node(dat,"\""+str+"\"");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StringLiterals",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // StringLiterals ::= CARACTER 
            {
              Node RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character ch = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(parser.currentSymbol.getLexeme(), "CHARACTER", ch, parser.currentSymbol.getLine(), parser.currentSymbol.getColumn());
                                    RESULT = new Node(dat, ("'").concat(Character.toString(ch)).concat("'"));
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StringLiterals",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // BooleanLiterals ::= TRUE 
            {
              Node RESULT =null;
		
                                    parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(parser.currentSymbol.getLexeme(), "TRUE", new Boolean(true), parser.currentSymbol.getLine(), parser.currentSymbol.getColumn());
                                    RESULT = new Node(dat, "true");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanLiterals",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // BooleanLiterals ::= FALSE 
            {
              Node RESULT =null;
		
                                    parser.currentSymbol = (JavaSymbol)CUP$Parser$stack.peek();

                                    Data dat = new Data(parser.currentSymbol.getLexeme(), "FALSE", new Boolean(false), parser.currentSymbol.getLine(), parser.currentSymbol.getColumn());
                                    RESULT = new Node(dat, "false");
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanLiterals",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ExprIncDec ::= Identifier Incremento 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                    Node increase = new Node("1");
                                    increase.getData().setType("int");
                                    increase.getData().setValue(1);
                                    RESULT = new Node("assign",id, new Node("+",new Node(id.getData(),id.label),increase));
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprIncDec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ExprIncDec ::= Identifier Decremento 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node id = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                    Node decrease = new Node("1");
                                    decrease.getData().setType("int");
                                    decrease.getData().setValue(1);
                                    RESULT = new Node("assign", id, new Node("-",new Node(id.getData(),id.label),decrease));
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprIncDec",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Incremento ::= SUMA SUMA 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Incremento",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Decremento ::= MENOS MENOS 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decremento",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

